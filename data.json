{
    "project": {
        "name": "Protoboard",
        "description": "A library to easily prototype boardgames. This is meant to be used for prototyping ideas and is therefore focused on ease and flexibility of creating different game components. Aesthetics, performance, and correctness are outside the scope of this project.",
        "version": "0.1.0",
        "url": "https://github.com/garysoed/protoboard",
        "colorMain": "#004000",
        "colorMainLight": "#008000",
        "colorKeyword": "#808080",
        "colorLink": "gold",
        "colorLinkExternal": "darkorange"
    },
    "files": {
        "src/ability/abilities.html": {
            "name": "src/ability/abilities.html",
            "modules": {},
            "classes": {
                "ability.Abilities.Builder": 1,
                "ability.Abilities": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/ability.html": {
            "name": "src/ability/ability.html",
            "modules": {},
            "classes": {
                "ability.Ability": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/droppable.html": {
            "name": "src/ability/droppable.html",
            "modules": {},
            "classes": {
                "ability.Droppable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/helpable.html": {
            "name": "src/ability/helpable.html",
            "modules": {},
            "classes": {
                "ability.Helpable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/pickable.html": {
            "name": "src/ability/pickable.html",
            "modules": {},
            "classes": {
                "ability.Pickable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/shuffleable.html": {
            "name": "src/ability/shuffleable.html",
            "modules": {},
            "classes": {
                "ability.Shuffleable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/toggleable.html": {
            "name": "src/ability/toggleable.html",
            "modules": {},
            "classes": {
                "ability.Toggleable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component/card.html": {
            "name": "src/component/card.html",
            "modules": {},
            "classes": {
                "component.Card": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component/component.html": {
            "name": "src/component/component.html",
            "modules": {},
            "classes": {
                "component.Component": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component/token.html": {
            "name": "src/component/token.html",
            "modules": {},
            "classes": {
                "component.Token": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/bag.html": {
            "name": "src/region/bag.html",
            "modules": {},
            "classes": {
                "region.Bag.RandomPickable": 1,
                "region.Bag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/deck.html": {
            "name": "src/region/deck.html",
            "modules": {},
            "classes": {
                "region.Deck": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/hand.html": {
            "name": "src/region/hand.html",
            "modules": {},
            "classes": {
                "region.Hand.ReorderableDroppable": 1,
                "region.Hand": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/rect.html": {
            "name": "src/region/rect.html",
            "modules": {},
            "classes": {
                "region.Rect.FlexDroppable": 1,
                "region.Rect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/region.html": {
            "name": "src/region/region.html",
            "modules": {},
            "classes": {
                "region.Region": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/move.html": {
            "name": "src/service/move.html",
            "modules": {},
            "classes": {
                "service.Move": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/preview.html": {
            "name": "src/service/preview.html",
            "modules": {},
            "classes": {
                "service.Preview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/registry.html": {
            "name": "src/service/registry.html",
            "modules": {},
            "classes": {
                "service.Registry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/surface/rectgrid.html": {
            "name": "src/surface/rectgrid.html",
            "modules": {},
            "classes": {
                "surface.RectGrid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/click.html": {
            "name": "src/trigger/click.html",
            "modules": {},
            "classes": {
                "trigger.Click": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/doubleclick.html": {
            "name": "src/trigger/doubleclick.html",
            "modules": {},
            "classes": {
                "trigger.DoubleClick": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/key.html": {
            "name": "src/trigger/key.html",
            "modules": {},
            "classes": {
                "trigger.Key": 1,
                "trigger.Key.Service": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/trigger.html": {
            "name": "src/trigger/trigger.html",
            "modules": {},
            "classes": {
                "trigger.Trigger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/preview.html": {
            "name": "src/ui/preview.html",
            "modules": {},
            "classes": {
                "ui.Preview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/previewer.html": {
            "name": "src/ui/previewer.html",
            "modules": {},
            "classes": {
                "ui.Previewer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/template.html": {
            "name": "src/ui/template.html",
            "modules": {},
            "classes": {
                "ui.Template": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/check.html": {
            "name": "src/check.html",
            "modules": {},
            "classes": {
                "Check": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/di.html": {
            "name": "src/di.html",
            "modules": {},
            "classes": {
                "DI.Provider": 1,
                "DI.BindingTree": 1,
                "DI.Scope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/events.html": {
            "name": "src/events.html",
            "modules": {},
            "classes": {
                "Events.Action": 1,
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/hammerwrapper.html": {
            "name": "src/hammerwrapper.html",
            "modules": {},
            "classes": {
                "HammerWrapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/module.html": {
            "name": "src/module.html",
            "modules": {
                "api": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/pbelement.html": {
            "name": "src/pbelement.html",
            "modules": {},
            "classes": {
                "PbElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils.html": {
            "name": "src/utils.html",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/01_overview.js": {
            "name": "tutorial/01_overview.js",
            "modules": {
                "tutorial": 1
            },
            "classes": {
                "1 Overview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/02_prerequisites.js": {
            "name": "tutorial/02_prerequisites.js",
            "modules": {},
            "classes": {
                "2 Prerequisites": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/03_basic.js": {
            "name": "tutorial/03_basic.js",
            "modules": {},
            "classes": {
                "3 Basic Usage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/04_customize.js": {
            "name": "tutorial/04_customize.js",
            "modules": {},
            "classes": {
                "4 Customizing Components": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/module.js": {
            "name": "tutorial/module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "api": {
            "name": "api",
            "submodules": {},
            "classes": {
                "ability.Abilities.Builder": 1,
                "ability.Abilities": 1,
                "ability.Ability": 1,
                "ability.Droppable": 1,
                "ability.Helpable": 1,
                "ability.Pickable": 1,
                "ability.Shuffleable": 1,
                "ability.Toggleable": 1,
                "component.Card": 1,
                "component.Component": 1,
                "component.Token": 1,
                "region.Bag.RandomPickable": 1,
                "region.Bag": 1,
                "region.Deck": 1,
                "region.Hand.ReorderableDroppable": 1,
                "region.Hand": 1,
                "region.Rect.FlexDroppable": 1,
                "region.Rect": 1,
                "region.Region": 1,
                "service.Move": 1,
                "service.Preview": 1,
                "service.Registry": 1,
                "surface.RectGrid": 1,
                "trigger.Click": 1,
                "trigger.DoubleClick": 1,
                "trigger.Key": 1,
                "trigger.Key.Service": 1,
                "trigger.Trigger": 1,
                "ui.Preview": 1,
                "ui.Previewer": 1,
                "ui.Template": 1,
                "Check": 1,
                "DI.Provider": 1,
                "DI.BindingTree": 1,
                "DI.Scope": 1,
                "Events.Action": 1,
                "Events": 1,
                "HammerWrapper": 1,
                "PbElement": 1,
                "Utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/utils.html",
            "line": 8
        },
        "tutorial": {
            "name": "tutorial",
            "submodules": {},
            "classes": {
                "1 Overview": 1,
                "2 Prerequisites": 1,
                "3 Basic Usage": 1,
                "4 Customizing Components": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tutorial/04_customize.js",
            "line": 1,
            "description": "Protoboard is a library to make prototyping boardgames easier. This is meant to be used for\nprototyping ideas and is therefore focused on ease and flexibility of creating different game\ncomponents. Aesthetics, performance, and correctness are outside the scope of this project,\nthough we do provide some basic support for theming.\n\nThis aims to be customizable in different levels:\n1. JavaScript: Provides JavaScript API to make boardgame components easier (coming soon)\n2. HTML: Developers can use preexisting HTML elements to write their own game.\n3. Themes: This library comes with some existing themes. You can customize the color themes, and\n   if you use CSS, you can customize in greater details (coming next).\n\nSome glossary of terminologies for the API:\n<dl>\n  <dt>{{#crossLink \"ability.Ability\"}}Ability{{/crossLink}}</dt>\n  <dd>These are where the main logic happens. A Component can have several abilities, each\n  triggered with a Trigger.</dd>\n\n  <dt>{{#crossLink \"component.Component\"}}Component{{/crossLink}}</dt>\n  <dd>Components are the basic entity of a board. They provide main interaction with the players.\n  Every component has one or more abilities registered to it. Check the\n  {{#crossLink \"component.Component\"}}API reference{{/crossLink}} to see the ability names\n  registered to a component.</dd>\n\n  <dt>{{#crossLink \"region.Region\"}}Region{{/crossLink}}</dt>\n  <dd>Regions can contain other components. They cannot be moved and can contain one or more\n  components. Examples include: deck, bag, and hand.</dd>\n\n  <dt>{{#crossLink \"trigger.Trigger\"}}Trigger{{/crossLink}}</dt>\n  <dd>Triggers listen to events in the document and triggers the ability it is associated with.\n  The most common trigger that this library relies on by default is the\n  {{#crossLink \"trigger.Key\"}}Key{{/crossLink}} trigger. To trigger a component, point at the\n  component and press the appropriate key.</dd>\n\n  <dt>UI</dt>\n  <dd>This library also comes with several basic UI elements for convenience. These elements do\n  not have a real life counterpart.</dd>\n</dl>\n\nEvery element introduced in Protoboard has 3 parts of its name:\n1. `pb-` is the prefix of every Protoboard element.\n2. The second prefix indicates the type of element:\n  - `pb-c-` indicates a component\n  - `pb-r-` indicates a region\n  - `pb-u-` indicates a UI element.\n3. The last part is the name of the element."
        }
    },
    "classes": {
        "ability.Abilities.Builder": {
            "name": "ability.Abilities.Builder",
            "shortname": "ability.Abilities.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/abilities.html",
            "line": 19,
            "description": "Builder helper for using {{#crossLink \"ability.Abilities\"}}Abilities{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "Element to add abilities to.",
                    "type": "Element"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "ability.Abilities": {
            "name": "ability.Abilities",
            "shortname": "ability.Abilities",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/abilities.html",
            "line": 100,
            "description": "Helper class to register abilities to custom elements. You can use this class to customize\nabilities, add abilities, and trigger registered abilities. Any interactions should start with\nthe {{#crossLink \"ability.Abilities/of:method\"}}{{/crossLink}} method.\n\n```javascript\n// Registering ability.\nAbilities.of(el)\n    .add(new Ability());\n```",
            "static": 1
        },
        "ability.Ability": {
            "name": "ability.Ability",
            "shortname": "ability.Ability",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/ability.html",
            "line": 24,
            "description": "Base class for all abilities. Any abilities must extend this class and implement the methods\nin this class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability. This is used to identify an ability that has been\n   added to an element. It therefore must be unique for the element.",
                    "type": "String"
                },
                {
                    "name": "defaultTrigger",
                    "description": "The default trigger to trigger this ability.",
                    "type": "trigger.Trigger"
                }
            ]
        },
        "ability.Droppable": {
            "name": "ability.Droppable",
            "shortname": "ability.Droppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/droppable.html",
            "line": 18,
            "description": "This ability works with conjunction of {{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\nElements with this ability adds the picked element as its child element when triggered.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-droppable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.Helpable": {
            "name": "ability.Helpable",
            "shortname": "ability.Helpable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/helpable.html",
            "line": 64,
            "description": "Displays the triggers for all registered abilities.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-helpable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger. Defaults to the '?'\n   key.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "ability.Key"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.Pickable": {
            "name": "ability.Pickable",
            "shortname": "ability.Pickable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/pickable.html",
            "line": 15,
            "description": "Element with this ability can be picked and dragged around. The element can be dropped on\nelements with {{#crossLink \"ability.Droppable\"}}{{/crossLink}} ability.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-pickable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.Shuffleable": {
            "name": "ability.Shuffleable",
            "shortname": "ability.Shuffleable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/shuffleable.html",
            "line": 19,
            "description": "Elements with this ability shuffles its children when triggered.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-shuffleable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.Toggleable": {
            "name": "ability.Toggleable",
            "shortname": "ability.Toggleable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/toggleable.html",
            "line": 21,
            "description": "Provides decorator to make an element toggleable between two states.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-toggleable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Key"
                },
                {
                    "name": "defaultConfig",
                    "description": "Default configuration for the ability.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "enabled",
                            "description": "True iff the ability should be enabled by default.",
                            "type": "Boolean"
                        },
                        {
                            "name": "active",
                            "description": "True iff the ability should be toggled to active by\n   default.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "extends": "ability.Ability"
        },
        "component.Card": {
            "name": "component.Card",
            "shortname": "component.Card",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/card.html",
            "line": 43,
            "description": "A representation of a card. To use this, create a `pb-c-card` element with two child elements:\n- One must have a `pb-front` class. This is the front face of the card.\n- One must have a `pb-back` class. This is the back face of the card.\n\nBy default, the card starts by showing its back. If you want to make it start by showing the\nfront face, add `flippable-active=\"true\"` to the `pb-c-card`.\n\nDefault supported abilities:\n- {{#crossLink \"ability.Pickable\"}}pick{{/crossLink}}\n- {{#crossLink \"ability.Toggleable\"}}flip{{/crossLink}}\n- {{#crossLink \"ability.Toggleable\"}}tap{{/crossLink}}\n\n```html\n<!-- Example: Create a card that starts by displaying its front side -->\n<pb-c-card flippable-active=\"true\">\n  <div class=\"pb-front\">Front side</div>\n  <div class=\"pb-back\">Back side</div>\n</pb-c-card>\n```",
            "extends": "component.Component"
        },
        "component.Component": {
            "name": "component.Component",
            "shortname": "component.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/component.html",
            "line": 10,
            "description": "Base class for all components.",
            "extends": "PbElement"
        },
        "component.Token": {
            "name": "component.Token",
            "shortname": "component.Token",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/token.html",
            "line": 36,
            "description": "A simple movable component with only one state. Examples of token:\n- Chess piece\n- Cubes\n- Damage marker\n\nTo use this, create a `pb-c-token` element with one child element. This child element will be\ndisplayed as the token.\n\n```html\n<!-- Example: A square token -->\n<pb-c-token>\n  <div style=\"background: red; width: 50px; height: 50px;\"></div>\n<pb-c-token>\n```\n\nSupported abilities:\n- {{#crossLink \"ability.Pickable\"}}pickable{{/crossLink}}",
            "extends": "component.Component"
        },
        "region.Bag.RandomPickable": {
            "name": "region.Bag.RandomPickable",
            "shortname": "region.Bag.RandomPickable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/bag.html",
            "line": 55,
            "description": "Element with this ability has content that can be picked and dragged around. When triggered,\na random child of the element will be picked. The child element can be dropped on elements\nwith {{#crossLink \"ability.Droppable\"}}{{/crossLink}} ability.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-pickable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Pickable"
        },
        "region.Bag": {
            "name": "region.Bag",
            "shortname": "region.Bag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/bag.html",
            "line": 87,
            "description": "A collection of components. You cannot see the component until you drag one out of it.\n\nTo make a bag, create a `pb-r-bag` element. You can override the content of the placeholder by\ncreating a child element with a `pb-placeholder-content` attribute. This element will be used for\nthe placeholder content.\n\n```html\n<!-- Example: Create a bag with a place holder token displaying \"SECRET!!\" -->\n<pb-r-bag>\n  <div pb-placeholder-content>SECRET!!</div>\n</pb-r-bag>\n```\n\nSupported abilitie:\n- {{#crossLink \"region.Bag.RandomPickable\"}}pickable{{/crossLink}}\n- {{#crossLink \"ability.Droppable\"}}droppable{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Deck": {
            "name": "region.Deck",
            "shortname": "region.Deck",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/deck.html",
            "line": 38,
            "description": "Represents a collection of items that can be sorted. To use this, create a `pb-r-deck` element.\nAny child elements of this class are considered to be in the deck.\n\n```html\n<!-- Example: Deck containing two cards -->\n<pb-r-deck>\n  <pb-c-card id=\"card1\">\n    <div class=\"pb-front\">Front</div>\n    <div class=\"pb-back\">Back</div>\n  </pb-c-card>\n  <pb-c-card id=\"card2\">\n    <div class=\"pb-front\">Front</div>\n    <div class=\"pb-back\">Back</div>\n  </pb-c-card>\n</pb-r-deck>\n```\n\nSupported abilities:\n- {{#crossLink \"ability.Droppable\"}}drop{{/crossLink}}\n- {{#crossLink \"ability.Shuffleable\"}}shuffle{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Hand.ReorderableDroppable": {
            "name": "region.Hand.ReorderableDroppable",
            "shortname": "region.Hand.ReorderableDroppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/hand.html",
            "line": 46,
            "description": "This ability works with conjunction of {{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\nElements with this ability adds the picked element as its child element when triggered.\nThe position of the dropped element depends on the mouse position when the trigger\noccured.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-droppable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Key"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Droppable"
        },
        "region.Hand": {
            "name": "region.Hand",
            "shortname": "region.Hand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/hand.html",
            "line": 93,
            "description": "Represents a hand. Like other {{#crossLink region.Region}}{{/crossLink}} elements, the children\nare considered to be in the hand. A hand allows the user to reorder the child elements,\ndepending on where a child element is dropped.\n\n```html\n<!-- Hand with two tokens -->\n<pb-r-deck>\n  <pb-c-token id=\"token1\">\n    <div>Token 1</div>\n  </pb-c-token>\n  <pb-c-token id=\"token2\">\n    <div>Token 2</div>\n  </pb-c-token>\n</pb-r-deck>\n```\n\nSupported abilities:\n- {{#crossLink \"region.Hand.ReorderableDroppable\"}}drop{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Rect.FlexDroppable": {
            "name": "region.Rect.FlexDroppable",
            "shortname": "region.Rect.FlexDroppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/rect.html",
            "line": 47,
            "description": "This ability works with conjunction of {{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\nElements with this ability adds the picked element as its child element when triggered. The\ndropped element is positioned to be directly below the mouse cursor when the drop happened.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-droppable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Droppable"
        },
        "region.Rect": {
            "name": "region.Rect",
            "shortname": "region.Rect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/rect.html",
            "line": 119,
            "description": "An arbitrary rectangular region. You can position elements anywhere in this region.\n\nSupported abilities:\n- {{#crossLink \"region.Rect.FlexDroppable\"}}drop{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Region": {
            "name": "region.Region",
            "shortname": "region.Region",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/region.html",
            "line": 9,
            "description": "Base class of all regions.",
            "extends": "PbElement"
        },
        "service.Move": {
            "name": "service.Move",
            "shortname": "service.Move",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/move.html",
            "line": 20,
            "description": "Service that handles moving elements around. Used by\n{{#crossLink \"ability.Droppable\"}}{{/crossLink}} and\n{{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\n\n```javascript\nMove.add(element);  // Sets the element as moved.\n\n// The element will be moved to a special container. To remove the element, just append it\n// somewhere else.\n```",
            "static": 1
        },
        "service.Preview": {
            "name": "service.Preview",
            "shortname": "service.Preview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/preview.html",
            "line": 8,
            "description": "Service that lets the user preview an element on mouse hover.",
            "static": 1
        },
        "service.Registry": {
            "name": "service.Registry",
            "shortname": "service.Registry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/registry.html",
            "line": 13,
            "description": "A service that collects functions to be ran at bootstrap.",
            "is_constructor": 1
        },
        "surface.RectGrid": {
            "name": "surface.RectGrid",
            "shortname": "surface.RectGrid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/surface/rectgrid.html",
            "line": 63,
            "description": "A surface that lays out its components in a grid. To use this, add attributes `pb-row` and\n`pb-col` to the element `pb-s-rectgrid`. These are the number of rows and columns in the grid.\n\nAdd the contents of the grid as children of this element. Use `pb-row` and `pb-col` attributes\non them to indicate their positions in the grid.\n\n```javascript\n<pb-s-rectgrid pb-row=\"2\" pb-col=\"3\">\n  <div pb-row=\"0\" pb-col=\"0\">Top Left</div>\n  <div pb-row=\"0\" pb-col=\"1\">Top Right</div>\n  <div pb-row=\"1\" pb-col=\"0\">Bottom Left</div>\n  <div pb-row=\"1\" pb-col=\"1\">Bottom Right</div>\n</pb-s-rectgrid>\n```",
            "extends": "PbElement"
        },
        "trigger.Click": {
            "name": "trigger.Click",
            "shortname": "trigger.Click",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/click.html",
            "line": 11,
            "description": "Triggers an ability when the element is clicked.",
            "extends": "trigger.Trigger"
        },
        "trigger.DoubleClick": {
            "name": "trigger.DoubleClick",
            "shortname": "trigger.DoubleClick",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/doubleclick.html",
            "line": 10,
            "description": "Triggers an ability when the element is double clicked.",
            "extends": "trigger.Trigger"
        },
        "trigger.Key": {
            "name": "trigger.Key",
            "shortname": "trigger.Key",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/key.html",
            "line": 19,
            "description": "Triggers an ability when the given key is pressed while the mouse is over the registered\nelement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "key",
                    "description": "The key that needs to be pressed to trigger the registered ability.",
                    "type": "String"
                }
            ],
            "extends": "trigger.Trigger"
        },
        "trigger.Key.Service": {
            "name": "trigger.Key.Service",
            "shortname": "trigger.Key.Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/key.html",
            "line": 119,
            "description": "Helper service for detecting key press.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "trigger.Trigger": {
            "name": "trigger.Trigger",
            "shortname": "trigger.Trigger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/trigger.html",
            "line": 8,
            "description": "Base class of all triggers. Triggers should be stateless and immutable."
        },
        "ui.Preview": {
            "name": "ui.Preview",
            "shortname": "ui.Preview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ui/preview.html",
            "line": 15,
            "description": "Class that contains a preview if the mouse enters the parent element. This will display\nthe children element as preview.\n\n```html\n<!-- Hover over the div to show \"DETAILS\" -->\n<div id=\"hover_over_me\">\n  <pb-u-preview>\n    <div>DETAILS</div>\n  </pb-u-preview>\n</div>\n```",
            "extends": "PbElement"
        },
        "ui.Previewer": {
            "name": "ui.Previewer",
            "shortname": "ui.Previewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ui/previewer.html",
            "line": 30,
            "description": "Element that displays the innerHTML of the `pb-u-preview` of element currently being hovered\nover. This works in tandem with {{#crossLink ui.Preview}}{{/crossLink}} and\n{{#crossLink service.Preview}}{{/crossLink}}.",
            "extends": "PbElement"
        },
        "ui.Template": {
            "name": "ui.Template",
            "shortname": "ui.Template",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ui/template.html",
            "line": 14,
            "description": "When this element is created, it will process a <a href=\"http://handlebarsjs.com/\">Handlebars\nJS</a> template and it is given and replace itself with the processed templates.\n\nTo refer to the template, add `template=\"<template_selector>\"`, where `template_selector` is a\nCSS selector to the template element. This template element contains the Handlebars template.\n\nTo pass in variables into the template, add `data-<name>=\"<var>\"` attributes to the element,\nwhere `name` is the key to be used in the template, and var is the property name accessible\nglobally.\n\n```html\n<template id=\"test\">\n  {{#with company}}\n    Name is {{name}}\n  {{/with}}\n</template>\n\nwindow['org'] = { name: 'GitHub' };\n\n<!-- The DIV content will be \"Name is GitHub\" -->\n<div>\n  <pb-u-template template=\"template#test\" data-company=\"org\"></pb-u-template>\n</div>\n```\n\nThis class also registers a `{{#pb-for <from> <to> <step>}}` block helper. This is a simple for\nloop that copies the inner block several times. You can access the index of the loop using the\n`@index` variable.",
            "extends": "PbElement"
        },
        "Check": {
            "name": "Check",
            "shortname": "Check",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/check.html",
            "line": 21,
            "description": "Utility class to check string values and parse them to different types.\n\n```javascript\n// Check that the string is a number, or throw an error if it isn't.\nCheck('123')\n    .isInt()\n    .orThrows('not a number'); // returns 123 as a number\n\n// Check that the string is a number, or a boolean, or use a default value.\nCheck('abc')\n    .isInt()\n    .isBoolean()\n    .orUse(false); // returns false\n```",
            "is_constructor": 1,
            "params": [
                {
                    "name": "input",
                    "description": "The value to be checked.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value parsed from the input value. Specifying this indicates that the\n   parsing has succeeded.",
                    "type": "Any"
                },
                {
                    "name": "checked",
                    "description": "Array of strings that describe the check that has failed on the input\n   string.",
                    "type": "Array"
                }
            ]
        },
        "DI.Provider": {
            "name": "DI.Provider",
            "shortname": "DI.Provider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/di.html",
            "line": 21,
            "is_constructor": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "The function to run. The function's arguments will be bound based on\n   their names.",
                    "type": "Function"
                },
                {
                    "name": "name",
                    "description": "Reference name of the provider. This is used for detecting cyclic\n   dependencies.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ]
        },
        "DI.BindingTree": {
            "name": "DI.BindingTree",
            "shortname": "DI.BindingTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/di.html",
            "line": 120,
            "description": "Represents a tree of bound values keyed by binding key.",
            "is_constructor": 1
        },
        "DI.Scope": {
            "name": "DI.Scope",
            "shortname": "DI.Scope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/di.html",
            "line": 193,
            "description": "Scope containing local bindings.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parentScope",
                    "description": "The parent scope.",
                    "type": "DI.Scope",
                    "optional": true,
                    "optdefault": "null"
                }
            ]
        },
        "Events.Action": {
            "name": "Events.Action",
            "shortname": "Events.Action",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/events.html",
            "line": 70,
            "description": "Helper class for using {{#crossLink \"Events\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "Element to operate on.",
                    "type": "Element"
                },
                {
                    "name": "scope",
                    "description": "Scope of the registered events.",
                    "type": "Object"
                }
            ]
        },
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/events.html",
            "line": 214,
            "description": "Utility class to register / unregister events easily. This library handles 4 methods of\nregistrations:\n- DOM\n- <a href=\"http://hammerjs.github.io/\">HammerJS</a>\n- <a href=\"http://jquery.com/\">JQuery</a>\n- <a href=\"http://dmauro.github.io/Keypress/\">Keypress</a>\n\nFor a given scope object, only one handler can be bound to an event type.\n\n```javascript\nvar scope = {};\n\n// Register for events.\nEvents.of(element, scope)\n    .on('dom', 'click', handleClick)        // Handles DOM click event.\n    .on('hammer', 'tap', handleTap)         // Handles HammerJS tap event.\n    .on('jquery', 'mouseup', handleMouseUp) // Handles mouseup event through JQuery.\n    .on('keyboard', 'a', handleKeyA);       // Handles keypress a\n\n// Unregister events in the given scope.\nEvents.of(element, scope)\n    .off('hammer')         // Unregisters all hammer events.\n    .off('dom', 'click')   // Unregisters all DOM click events.\n    .off();                // Unregisters all events in this scope.\n```",
            "static": 1
        },
        "HammerWrapper": {
            "name": "HammerWrapper",
            "shortname": "HammerWrapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/hammerwrapper.html",
            "line": 10,
            "description": "Wrapper around <a href=\"http://hammerjs.github.io/\">HammerJS</a>.",
            "static": 1
        },
        "PbElement": {
            "name": "PbElement",
            "shortname": "PbElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "namespace": "",
            "file": "src/pbelement.html",
            "line": 13,
            "description": "Base class of all ProtoBoard elements.",
            "extends": "HTMLElement"
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "namespace": "",
            "file": "src/utils.html",
            "line": 8,
            "description": "Various miscellaneous utilities. They are not meant for general usage, but feel free to use\nthem.",
            "static": 1
        },
        "1 Overview": {
            "name": "1 Overview",
            "shortname": "1 Overview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/01_overview.js",
            "line": 1,
            "description": "Protoboard is a library to make prototyping boardgames easier. This is meant to be used for\nprototyping ideas and is therefore focused on ease and flexibility of creating different game\ncomponents. Aesthetics, performance, and correctness are outside the scope of this project,\nthough we do provide some basic support for theming.\n\nThis aims to be customizable in different levels:\n1. JavaScript: Provides JavaScript API to make boardgame components easier (coming soon)\n2. HTML: Developers can use preexisting HTML elements to write their own game.\n3. Themes: This library comes with some existing themes. You can customize the color themes, and\n   if you use CSS, you can customize in greater details (coming next).\n\nSome glossary of terminologies for the API:\n<dl>\n  <dt>{{#crossLink \"ability.Ability\"}}Ability{{/crossLink}}</dt>\n  <dd>These are where the main logic happens. A Component can have several abilities, each\n  triggered with a Trigger.</dd>\n\n  <dt>{{#crossLink \"component.Component\"}}Component{{/crossLink}}</dt>\n  <dd>Components are the basic entity of a board. They provide main interaction with the players.\n  Every component has one or more abilities registered to it. Check the\n  {{#crossLink \"component.Component\"}}API reference{{/crossLink}} to see the ability names\n  registered to a component.</dd>\n\n  <dt>{{#crossLink \"region.Region\"}}Region{{/crossLink}}</dt>\n  <dd>Regions can contain other components. They cannot be moved and can contain one or more\n  components. Examples include: deck, bag, and hand.</dd>\n\n  <dt>{{#crossLink \"trigger.Trigger\"}}Trigger{{/crossLink}}</dt>\n  <dd>Triggers listen to events in the document and triggers the ability it is associated with.\n  The most common trigger that this library relies on by default is the\n  {{#crossLink \"trigger.Key\"}}Key{{/crossLink}} trigger. To trigger a component, point at the\n  component and press the appropriate key.</dd>\n\n  <dt>UI</dt>\n  <dd>This library also comes with several basic UI elements for convenience. These elements do\n  not have a real life counterpart.</dd>\n</dl>\n\nEvery element introduced in Protoboard has 3 parts of its name:\n1. `pb-` is the prefix of every Protoboard element.\n2. The second prefix indicates the type of element:\n  - `pb-c-` indicates a component\n  - `pb-r-` indicates a region\n  - `pb-u-` indicates a UI element.\n3. The last part is the name of the element."
        },
        "2 Prerequisites": {
            "name": "2 Prerequisites",
            "shortname": "2 Prerequisites",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/02_prerequisites.js",
            "line": 1,
            "description": "1. Install <a href=\"https://www.npmjs.com/\">NPM</a>.\n2. Run `npm install protoboard`.\n3. Install <a href=\"http://gulpjs.com/\">Gulp</a>: `npm install gulp`.\n4. Protoboard relies on <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/imports/\">\n   HTML Import</a>. So you will need an HTTP server serving static files. A simple one you can\n   use is <a href=\"https://www.npmjs.com/package/http-server\">http-server</a>:\n   `npm install http-server`.\n5. Navigate to the root directory of the project (where the `gulpfile.js`) file is, and run\n   `gulp compile`. This will compile all the source files.\n6. Run `http-server` from the root directory of the project, and navigate to the file you want to\n   open. A good one to start is `ex/all/index.html`."
        },
        "3 Basic Usage": {
            "name": "3 Basic Usage",
            "shortname": "3 Basic Usage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/03_basic.js",
            "line": 1,
            "description": "To use this library, you will need to write an HTML file. You will need to do the following:\n1. Add the following code to the `<head>` block of the document:\n   ```html\n   <link rel=\"import\" href=\"path/to/out/di.html\">\n   <link rel=\"import\" href=\"path/to/out/bootstrap.html\">\n   ```\n2. Below the `<link>` tags added in the previous steps, add the code below. Copy the code\n   verbatim.\n   ```html\n   <script>\n     DI.run(function(Bootstrap) { Bootstrap.run(document); });\n   </script>\n   ```\n   This code sets up all the custom elements used in the page.\n3. Add custom elements in the body. Be sure to import the appropriate files in the `<head>`\n   block. For example, to add a token:\n   ```html\n   <head>\n     <!-- Required -->\n     <link rel=\"import\" href=\"path/to/out/di.html\">\n     <link rel=\"import\" href=\"path/to/out/bootstrap.html\">\n\n     <!-- Import token -->\n     <link rel=\"import\" href=\"path/to/out/component/token.html\">\n   </head>\n\n   <body>\n     <pb-c-token>\n       <div>Token Content</div>\n     </pb-c-token>\n\n     <script>\n       // Required\n       DI.run(function(Bootstrap) { Bootstrap.run(document); });\n     </script>\n   </body>\n   ```\n\nTo help with debugging for missing imports, you can open the developer tools (Alt + &#8984; for\nChrome on Mac) and check the Console tab. It should tell you elements which are missing imports.\nFor instance `Element pb-r-bag is resolved` indicates that the import for `bag.html` is missing.\n\nMore information on using the element is in the API pages. You can also see\n<a href=\"https://github.com/garysoed/protoboard/blob/master/ex/all/index.html\">all/index.html\n</a> for examples on how to use every element. You can also play around with every element on\nthat page."
        },
        "4 Customizing Components": {
            "name": "4 Customizing Components",
            "shortname": "4 Customizing Components",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/04_customize.js",
            "line": 1,
            "description": "Every component and region has a set of abilities registered to them. You can view them from\ntheir respective API page. You can customize these abilities to suit your game needs.\n\nEvery ability support the following customization:\n- You can enable / disable the ability by setting the attribute of the component / region. For\n  example:\n  ```html\n  <pb-c-token pickable=\"false\">\n  ```\n  That makes the token non pickable.\n- You can change the trigger for each ability by setting the attribute of the component / region\n  with a `-on` prefix. For example:\n  ```html\n  <pb-c-token pickable=\"pb-key-p\">\n  ```\n  That sets the token to be picked when the user hovers over the token and presses `p`. Look at\n  classes extending {{#crossLink \"trigger.Trigger\"}}{{/crossLink}} for more triggers.\n\nMore additional customizations, check out the ability's API page."
        }
    },
    "classitems": [
        {
            "file": "src/ability/abilities.html",
            "line": 31,
            "description": "Adds the given ability to the element specified in the builder.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "ability",
                    "description": "The ability to add.",
                    "type": "ability.Ability"
                }
            ],
            "return": {
                "description": "This builder object for chaining.",
                "type": "ability.Abilities.Builder"
            },
            "class": "ability.Abilities.Builder"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 57,
            "itemtype": "method",
            "name": "getAll",
            "return": {
                "description": "Map of ability name to ability of the element in context. This excludes the\n   trigger attribute of the abilities.",
                "type": "Map"
            },
            "class": "ability.Abilities.Builder"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 75,
            "description": "Triggers the ability corresponding to the given name.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability to trigger. Refer to the element's API for the\n   names.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This builder object for chaining.",
                "type": "ability.Abilities.Builder"
            },
            "class": "ability.Abilities.Builder"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 116,
            "description": "Handler called when the MutationObserver detected a change.",
            "itemtype": "method",
            "name": "__onMutation__",
            "params": [
                {
                    "name": "records",
                    "description": "Array of {{#crossLink \"MutationRecord\"}}{{/crossLink}}s.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ability.Abilities"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 133,
            "description": "Creates a new {{#crossLink \"ability.Abilities.Builder\"}}Builder{{/crossLink}} to operate on\nthe given element.",
            "itemtype": "method",
            "name": "of",
            "params": [
                {
                    "name": "el",
                    "description": "Element that the Builder should operate on.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "The builder object.",
                "type": "ability.Abilities.Builder"
            },
            "class": "ability.Abilities"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 145,
            "description": "Initializes the added abilities on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to initialize.",
                    "type": "Element"
                }
            ],
            "class": "ability.Abilities"
        },
        {
            "file": "src/ability/ability.html",
            "line": 36,
            "description": "Initializes the ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default values to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 50,
            "description": "Updates the inner state of the ability based on changes to the element.",
            "itemtype": "method",
            "name": "updateConfig",
            "params": [
                {
                    "name": "el",
                    "description": "Element whose attributes have changed.",
                    "type": "Element"
                }
            ],
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 73,
            "description": "Triggers the effect of the ability on the given element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to trigger the ability on.",
                    "type": "Element"
                }
            ],
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 81,
            "description": "Returns the trigger for this ability on this element.",
            "itemtype": "method",
            "name": "getTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to return the trigger for this ability for.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "The trigger for this ability on this element, or null if there\n   is none.",
                "type": "trigger.Trigger|null"
            },
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 93,
            "description": "Name of the ability. This is also the name of the attribute on the element corresponding to\nthis ability.",
            "itemtype": "property",
            "name": "attrName",
            "type": "string",
            "final": 1,
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 105,
            "description": "The name of the attribute on the element corresponding to this ability that sets the trigger\nfor this ability. This is the name of the ability with a <code>-on</code> postfix.",
            "itemtype": "property",
            "name": "attrTrigger",
            "type": "string",
            "final": 1,
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/droppable.html",
            "line": 35,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Droppable"
        },
        {
            "file": "src/ability/droppable.html",
            "line": 49,
            "description": "Drops the next element added to {{#crossLink \"service.Move\"}}{{/crossLink}} as a child of the\ngiven element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element to drop the picked element into.",
                    "type": "Element"
                }
            ],
            "class": "ability.Droppable"
        },
        {
            "file": "src/ability/helpable.html",
            "line": 78,
            "description": "Displays the triggers for all abilities registered to this element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element whose abilities should be displayed.",
                    "type": "Element"
                }
            ],
            "class": "ability.Helpable"
        },
        {
            "file": "src/ability/pickable.html",
            "line": 32,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Pickable"
        },
        {
            "file": "src/ability/pickable.html",
            "line": 46,
            "description": "Picks up the element and makes it follow the mouse cursor.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element to be picked up.",
                    "type": "Element"
                }
            ],
            "class": "ability.Pickable"
        },
        {
            "file": "src/ability/shuffleable.html",
            "line": 35,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Shuffleable"
        },
        {
            "file": "src/ability/shuffleable.html",
            "line": 49,
            "description": "Shuffles the given element's children, if this ability is enabled on the element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element whose children should be shuffled.",
                    "type": "Element"
                }
            ],
            "class": "ability.Shuffleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 49,
            "itemtype": "method",
            "name": "__isEnabled__",
            "params": [
                {
                    "name": "el",
                    "description": "Element to check.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True iff the ability is enabled for the given element.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 59,
            "itemtype": "method",
            "name": "__isActive__",
            "params": [
                {
                    "name": "el",
                    "description": "Element to check.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True iff the element is currently active.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 69,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 86,
            "description": "Toggles the state of the given element, if the ability is enabled on the element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element that should be toggled.",
                    "type": "Element"
                }
            ],
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 98,
            "description": "The name of the attribute on the element corresponding to this ability that indicates that\nthe element is in active state. This is the name of the ability with a <code>-active</code>\npostfix.",
            "itemtype": "property",
            "name": "attrActive",
            "type": "string",
            "final": 1,
            "class": "ability.Toggleable"
        },
        {
            "file": "src/component/card.html",
            "line": 69,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "component.Card"
        },
        {
            "file": "src/component/token.html",
            "line": 60,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "component.Token"
        },
        {
            "file": "src/region/bag.html",
            "line": 71,
            "description": "Picks up a random child element of the given element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element whose child element should be randomly picked.",
                    "type": "Element"
                }
            ],
            "class": "region.Bag.RandomPickable"
        },
        {
            "file": "src/region/bag.html",
            "line": 111,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Bag"
        },
        {
            "file": "src/region/deck.html",
            "line": 68,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Deck"
        },
        {
            "file": "src/region/hand.html",
            "line": 63,
            "description": "Drops the element added to {{#crossLink \"service.Move\"}}{{/crossLink}} as a child of the\ngiven element. The position of the dropped child depends on the position of the mouse at the\ntrigger time relative to the other children.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to drop the picked element into.",
                    "type": "Element"
                }
            ],
            "class": "region.Hand.ReorderableDroppable"
        },
        {
            "file": "src/region/hand.html",
            "line": 118,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Hand"
        },
        {
            "file": "src/region/hand.html",
            "line": 131,
            "description": "Called when the element is attached to the document.",
            "itemtype": "method",
            "name": "attachedCallback",
            "class": "region.Hand"
        },
        {
            "file": "src/region/hand.html",
            "line": 140,
            "description": "Called when the element is detached from the document.",
            "itemtype": "method",
            "name": "detachedCallback",
            "class": "region.Hand"
        },
        {
            "file": "src/region/rect.html",
            "line": 64,
            "description": "Handles event when the MutationObserver observes changes to the child list.",
            "itemtype": "method",
            "name": "__onDomMutation__",
            "params": [
                {
                    "name": "mutations",
                    "description": "Array of MutationRecords.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "region.Rect.FlexDroppable"
        },
        {
            "file": "src/region/rect.html",
            "line": 80,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "region.Rect.FlexDroppable"
        },
        {
            "file": "src/region/rect.html",
            "line": 92,
            "description": "Drop the last dragged element on the given element",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to drop the dragged element into.",
                    "type": "Element"
                }
            ],
            "class": "region.Rect.FlexDroppable"
        },
        {
            "file": "src/region/rect.html",
            "line": 130,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Rect"
        },
        {
            "file": "src/service/move.html",
            "line": 36,
            "description": "Reference to the document that the service operates in.",
            "itemtype": "property",
            "name": "__document__",
            "type": "Document",
            "access": "private",
            "tagname": "",
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 45,
            "description": "The container of all the moved elements.",
            "itemtype": "property",
            "name": "__container__",
            "type": "Element",
            "access": "private",
            "tagname": "",
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 54,
            "description": "Moves the container element to the last known location of the mouse.",
            "itemtype": "method",
            "name": "__moveContainer__",
            "access": "private",
            "tagname": "",
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 73,
            "description": "Handles event when the mouse is moved.",
            "itemtype": "method",
            "name": "__onMouseMove__",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding mouse event.",
                    "type": "MouseEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 86,
            "description": "Sets the given element as being moved.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "el",
                    "description": "Element to move.",
                    "type": "Element"
                }
            ],
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 97,
            "description": "The elements that are being moved.",
            "itemtype": "property",
            "name": "movedElements",
            "type": "Set",
            "final": 1,
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 108,
            "description": "Last known X coordinate of the mouse in px.",
            "itemtype": "property",
            "name": "mouseX",
            "type": "number",
            "final": 1,
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 119,
            "description": "Last known Y coordinate of the mouse in px.",
            "itemtype": "property",
            "name": "mouseY",
            "type": "number",
            "final": 1,
            "class": "service.Move"
        },
        {
            "file": "src/service/preview.html",
            "line": 22,
            "description": "Element that is being previewed, if any. If null, no element is being previewed.",
            "itemtype": "property",
            "name": "previewedEl",
            "type": "Element|null",
            "class": "service.Preview"
        },
        {
            "file": "src/service/preview.html",
            "line": 40,
            "description": "Fired when the previewed element has been changed.",
            "itemtype": "event",
            "name": "element-changed",
            "class": "service.Preview"
        },
        {
            "file": "src/service/registry.html",
            "line": 24,
            "description": "Sets the given element name and prototype to be registered as custom element at bootstrap.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "Element name to register",
                    "type": "Name"
                },
                {
                    "name": "prototype",
                    "description": "Prototype object of the custom element.",
                    "type": "Object"
                }
            ],
            "class": "service.Registry"
        },
        {
            "file": "src/service/registry.html",
            "line": 42,
            "description": "Runs the given function at bootstrap.",
            "itemtype": "method",
            "name": "runAtRegister",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to run. This function takes in a\n   {{#crossLink \"Document\"}}{{/crossLink}} and a\n   {{#crossLink \"service.Config\"}}{{/crossLink}}.",
                    "type": "Function"
                }
            ],
            "class": "service.Registry"
        },
        {
            "file": "src/service/registry.html",
            "line": 54,
            "description": "Runs all the collected functions.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "doc",
                    "description": "Document object to run the functions in.",
                    "type": "Document"
                },
                {
                    "name": "Config",
                    "description": "The configuration service to use.",
                    "type": "service.Config"
                }
            ],
            "class": "service.Registry"
        },
        {
            "file": "src/surface/rectgrid.html",
            "line": 84,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "surface.RectGrid"
        },
        {
            "file": "src/surface/rectgrid.html",
            "line": 119,
            "description": "Returns the element at the given row and column, or null if not found.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "row",
                    "description": "The row index of the element to be returned.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The col index of the element to be returned.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The HTML element at the given row and col, or null if not found.",
                "type": "HTMLElement|null"
            },
            "class": "surface.RectGrid"
        },
        {
            "file": "src/trigger/click.html",
            "line": 19,
            "description": "Registers the given element to trigger the given ability when clicked.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element to register.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/click.html",
            "line": 31,
            "description": "Unregisters the given element from triggering the registered ability when clicked.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/click.html",
            "line": 41,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String pb-click",
                "type": "String"
            },
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/click.html",
            "line": 49,
            "itemtype": "method",
            "name": "helpText",
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/click.html",
            "line": 57,
            "description": "Parses the input string",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "The string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Click trigger if parse is successful, or `undefined`\n   otherwise.",
                "type": "trigger.Click|undefined"
            },
            "static": 1,
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 18,
            "description": "Registers the given element to trigger the given ability when double clicked.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element to register.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 30,
            "description": "Unregisters the given element from triggering the registered ability when double clicked.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 40,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String pb-dblclick",
                "type": "String"
            },
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 48,
            "itemtype": "method",
            "name": "helpText",
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 56,
            "description": "Parses the input string",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "The string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The DoubleClick trigger if parse is successful, or\n   `undefined` otherwise.",
                "type": "trigger.DoubleClick|undefined"
            },
            "static": 1,
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/key.html",
            "line": 32,
            "description": "Handles event called when mouse has entered the element.",
            "itemtype": "method",
            "name": "__onMouseEnter__",
            "params": [
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                },
                {
                    "name": "element",
                    "description": "The element that the mouse has entered.",
                    "type": "Element"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 44,
            "description": "Handles event called when mouse has left the element.",
            "itemtype": "method",
            "name": "__onMouseLeave__",
            "params": [
                {
                    "name": "element",
                    "description": "The element that the mouse has left.",
                    "type": "Element"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 55,
            "description": "Registers the given element to trigger the given ability when a key is pressed while the\nmouse is hovering over the element.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element that needs to be hovered over to trigger the ability.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 70,
            "description": "Unregisters the given element from any listeners registered in the on method.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister the listener from.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 81,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String `pb-key-<key>`, where `key` is the key that needs to be pressed to\n   trigger this.",
                "type": "String"
            },
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 90,
            "itemtype": "method",
            "name": "helpText",
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 98,
            "description": "Parses the input string",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "The string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Key trigger if parse is successful, or `undefined`\n   otherwise.",
                "type": "trigger.Key|undefined"
            },
            "static": 1,
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 129,
            "description": "Handles event when a key press is detected.",
            "itemtype": "method",
            "name": "__onKeyPress__",
            "params": [
                {
                    "name": "event",
                    "description": "The KeyboardEvent that triggered this handler.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 168,
            "description": "Initializes the service.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to listen to key presses.",
                    "type": "Document"
                }
            ],
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 179,
            "description": "Registers the given element to trigger the given ability when the given key is pressed.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "element",
                    "description": "The element to trigger when the given key is pressed.",
                    "type": "Element"
                },
                {
                    "name": "key",
                    "description": "The key to press",
                    "type": "String"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 200,
            "description": "Unregisters the given element.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "element",
                    "description": "The element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 210,
            "description": "Clears all registered elements.",
            "itemtype": "method",
            "name": "clear",
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 219,
            "description": "Map of elements to trigger the ability on. The key is the element, the value is a map of key\nto a set of abilities.",
            "itemtype": "property",
            "name": "hoveredEls",
            "type": "Map",
            "final": 1,
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/trigger.html",
            "line": 14,
            "description": "Registers the given element to trigger the given ability when clicked.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element to register.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Trigger"
        },
        {
            "file": "src/trigger/trigger.html",
            "line": 25,
            "description": "Unregisters the given element from triggering the registered ability when clicked.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Trigger"
        },
        {
            "file": "src/trigger/trigger.html",
            "line": 35,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String representation of the trigger. This can be used to set the trigger of\n   an ability.",
                "type": "String"
            },
            "class": "trigger.Trigger"
        },
        {
            "file": "src/ui/preview.html",
            "line": 42,
            "description": "Callback called when the mouse has left the parent element.",
            "itemtype": "method",
            "name": "__onMouseOut__",
            "access": "private",
            "tagname": "",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 52,
            "description": "Callback called when the mouse has entered the parent element.",
            "itemtype": "method",
            "name": "__onMouseOver__",
            "access": "private",
            "tagname": "",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 62,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 73,
            "description": "Called when the element is attached to the document.",
            "itemtype": "method",
            "name": "attachedCallback",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 87,
            "description": "Called when the element is detached from the document.",
            "itemtype": "method",
            "name": "detachedCallback",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 48,
            "description": "Called when the preview element has changed.",
            "itemtype": "method",
            "name": "__onPreviewElChanged__",
            "access": "private",
            "tagname": "",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 62,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 75,
            "description": "Called when the element is attached to the document.",
            "itemtype": "method",
            "name": "attachedCallback",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 88,
            "description": "Called when the element is detached from the document.",
            "itemtype": "method",
            "name": "detachedCallback",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/template.html",
            "line": 67,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "ui.Template"
        },
        {
            "file": "src/check.html",
            "line": 51,
            "description": "Handles when a check has failed.",
            "itemtype": "method",
            "name": "__onFailure__",
            "params": [
                {
                    "name": "checked",
                    "description": "The description of check that has been done.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new Check object with the appended checked description.",
                "type": "Check"
            },
            "access": "private",
            "tagname": "",
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 66,
            "description": "Handles when a parse has succeeded.",
            "itemtype": "method",
            "name": "__onSuccess__",
            "params": [
                {
                    "name": "value",
                    "description": "The value successfully parsed from the string input.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "A new check object with the first successfully parsed value.",
                "type": "Check"
            },
            "access": "private",
            "tagname": "",
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 82,
            "description": "Try to parse the input string as an int with the given radix.",
            "itemtype": "method",
            "name": "isInt",
            "params": [
                {
                    "name": "radix",
                    "description": "Radix to use to parse the input string. Defaults to 10.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new instance of the Check object used for chaining.",
                "type": "Check"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 98,
            "description": "Try to parse the input string as a boolean.",
            "itemtype": "method",
            "name": "isBoolean",
            "return": {
                "description": "A new instance of the Check object used for chaining.",
                "type": "Check"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 116,
            "description": "Throws an exception if no parse has been successful.",
            "itemtype": "method",
            "name": "orThrows",
            "params": [
                {
                    "name": "msg",
                    "description": "The error message to throw. If not defined, will use an auto generated\n   one.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first successful parsed value.",
                "type": "Any"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 136,
            "description": "Use the given value if no parse attempts have been successful.",
            "itemtype": "method",
            "name": "orUse",
            "params": [
                {
                    "name": "backup",
                    "description": "Value to use as backup if no parsing has been successful.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The first successful parsed value, or the given backup value if no parse\n   attempts were successful.",
                "type": "Any"
            },
            "class": "Check"
        },
        {
            "file": "src/di.html",
            "line": 36,
            "description": "Resolves the provider. Resolved values are cached per scope.",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "scope",
                    "description": "The scope to resolve the value in.",
                    "type": "DI.Scope"
                }
            ],
            "return": {
                "description": "The resolved value for the given scope.",
                "type": "Object"
            },
            "class": "DI.Provider"
        },
        {
            "file": "src/di.html",
            "line": 129,
            "description": "Adds the given key and value to the tree. The tree will try to bind using the last segment of\nthe key. If this causes a conflict, it will create a subtree.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "key",
                    "description": "The key to bind the value to.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to be bound.",
                    "type": "Object"
                },
                {
                    "name": "depth",
                    "description": "The depth of the key to use as binding key. This should not be\n   called from outside the class.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "DI.BindingTree"
        },
        {
            "file": "src/di.html",
            "line": 162,
            "description": "Returns the value corresponding to the given key.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the value to return.",
                    "type": "String"
                },
                {
                    "name": "depth",
                    "description": "The depth of the key to use as binding key. This should not be\n   called from outside the class.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The bound value, or undefined if the value cannot be found, or if the key has\n   collision but collision cannot be resolved.",
                "type": "Any"
            },
            "class": "DI.BindingTree"
        },
        {
            "file": "src/di.html",
            "line": 218,
            "description": "Creates a new child scope with the given value bound to the given key in its local binding.",
            "itemtype": "method",
            "name": "with",
            "params": [
                {
                    "name": "key",
                    "description": "The key to bound the value to.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to run. The function's arguments will be bound based on\n   their names.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The newly created child scope.",
                "type": "DI.Scope"
            },
            "class": "DI.Scope"
        },
        {
            "file": "src/di.html",
            "line": 237,
            "description": "Globally binds the given value to the given key.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "key",
                    "description": "The key to bound the value to.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to run. The function's arguments will be bound based on\n   their names.",
                    "type": "Function"
                }
            ],
            "class": "DI.Scope"
        },
        {
            "file": "src/di.html",
            "line": 250,
            "description": "Returns the provider bound to the given key and resolve it in this scope. This will first check\nfor the local bindings, then its ancestors. If no binding is found in the ancestral path, this\nwill check for the global bindings.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Key whose bound value should be returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value bound to the given key, or undefined if no values can be found.",
                "type": "Any"
            },
            "class": "DI.Scope"
        },
        {
            "file": "src/di.html",
            "line": 268,
            "description": "Runs the given function after injecting any dependencies.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to run. The function's arguments will be bound based on\n   their names.",
                    "type": "Function"
                }
            ],
            "class": "DI.Scope"
        },
        {
            "file": "src/events.html",
            "line": 91,
            "itemtype": "method",
            "name": "__isRegistered__",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to be checked.",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "Name of the event to be checked.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Events.Action"
        },
        {
            "file": "src/events.html",
            "line": 105,
            "description": "Registers the given handler to the given event name for the given type.",
            "itemtype": "method",
            "name": "__register__",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to register the handler to.",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "Name of the event to register the handler to.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Handler to be called for the given event.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The Events object for chaining.",
                "type": "Events"
            },
            "access": "private",
            "tagname": "",
            "class": "Events.Action"
        },
        {
            "file": "src/events.html",
            "line": 130,
            "description": "Unregisters the handlers in the scope for the element.\n\n- If only type and eventName are given, all handlers listening to that event name of that type\n  will be unregistered.\n- If only type is given, all handlers listening for that type will be unregistered.\n- If nothing is given, all handlers in the scope will be unregistered.",
            "itemtype": "method",
            "name": "__unregister__",
            "params": [
                {
                    "name": "type",
                    "description": "Type of event to unregister.",
                    "type": "String="
                },
                {
                    "name": "eventName",
                    "description": "If given, all handlers listening to this event will be\n    unregistered.",
                    "type": "String="
                }
            ],
            "return": {
                "description": "The Events object for chaining.",
                "type": "!Events"
            },
            "access": "private",
            "tagname": "",
            "class": "Events.Action"
        },
        {
            "file": "src/events.html",
            "line": 182,
            "description": "Calls on method of the corresponding type on the element, registering the given event name\nand handler.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The registration type.",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "Name of the event to register the handler to.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Handler to be called for the given event.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The Action object for chaining.",
                "type": "Events.Action"
            },
            "class": "Events.Action"
        },
        {
            "file": "src/events.html",
            "line": 196,
            "description": "Calls off method of the corresponding type on the element, unregistering the handlers in the\nscope for the element.\n\n- If eventName is given, all handlers listening to that event name will be unlistened.\n- If nothing is given, all handlers in the scope will be unlistened.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The registration type.",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "If given, all handlers listening to this event will be\n    unlistened.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Action object for chaining.",
                "type": "Events.Action"
            },
            "class": "Events.Action"
        },
        {
            "file": "src/events.html",
            "line": 246,
            "description": "Creates an Events object that operates on the given element with the given scope.",
            "itemtype": "method",
            "name": "of",
            "params": [
                {
                    "name": "element",
                    "description": "The element to operate on.",
                    "type": "Element"
                },
                {
                    "name": "scope",
                    "description": "Scope of the registered events.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Chainable action object.",
                "type": "Events.Action"
            },
            "static": 1,
            "class": "Events"
        },
        {
            "file": "src/hammerwrapper.html",
            "line": 23,
            "description": "Creates a new Hammer object, or return a cached one if one already exists.",
            "itemtype": "method",
            "name": "__getHammer__",
            "params": [
                {
                    "name": "el",
                    "description": "The element associated with the Hammer JS object.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "The Hammer JS object.",
                "type": "Hammer"
            },
            "access": "private",
            "tagname": "",
            "class": "HammerWrapper"
        },
        {
            "file": "src/hammerwrapper.html",
            "line": 50,
            "description": "Registers the given gesture to the given element and handler.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "el",
                    "description": "The element to register.",
                    "type": "Element"
                },
                {
                    "name": "gestureType",
                    "description": "The type of Hammer JS gesture to register.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function to register.",
                    "type": "Function"
                }
            ],
            "class": "HammerWrapper"
        },
        {
            "file": "src/hammerwrapper.html",
            "line": 62,
            "description": "Unregisters the given gesture from the given element and handler.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "el",
                    "description": "Element to unregister from.",
                    "type": "Element"
                },
                {
                    "name": "gestureType",
                    "description": "Type of Hammer JS gesture to register.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function to unregister.",
                    "type": "Function"
                }
            ],
            "class": "HammerWrapper"
        },
        {
            "file": "src/pbelement.html",
            "line": 21,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 31,
            "description": "Called when the element is attached to the document.",
            "itemtype": "method",
            "name": "attachedCallback",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 40,
            "description": "Called when the element is detached from the document.",
            "itemtype": "method",
            "name": "detachedCallback",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 47,
            "description": "True iff the element has been created.",
            "type": "boolean",
            "itemtype": "property",
            "name": "isCreated",
            "final": 1,
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 16,
            "description": "Extracts the given template from the given document.",
            "itemtype": "method",
            "name": "extractTemplate",
            "params": [
                {
                    "name": "templateQuery",
                    "description": "The query used to obtain the template.",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "description": "The document object to obtain the template from.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "The node in the template.",
                "type": "Node"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 28,
            "description": "Activates the given teplate element.",
            "itemtype": "method",
            "name": "activateTemplate",
            "params": [
                {
                    "name": "template",
                    "description": "The template element.",
                    "type": "Element"
                },
                {
                    "name": "doc",
                    "description": "The document object to activate the template in.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "The activated template element.",
                "type": "Element"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 40,
            "description": "Returns the referenced function, or noop function if the referenced function does not exist.",
            "itemtype": "method",
            "name": "nonNullFn",
            "params": [
                {
                    "name": "scope",
                    "description": "Object containing the referenced function.",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Name of the function to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The referenced function, or noop function if the referenced function does\n   not exist.",
                "type": "Function"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 53,
            "description": "Observes the given property on the given object.",
            "itemtype": "method",
            "name": "observe",
            "params": [
                {
                    "name": "object",
                    "description": "Object to observe changes to.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The property name to listen to, or null to listen to all\n   properties.",
                    "type": "String|null"
                },
                {
                    "name": "handler",
                    "description": "Handler called when a property has changed. The handler accepts 3\n   arguments: property name, change type, and the old value of the property.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The handler used to unobserve the object.",
                "type": "Function"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 76,
            "description": "Returns a Promise that waits for the given property of the given object to fulfill the given\ncondition.",
            "itemtype": "method",
            "name": "waitFor",
            "params": [
                {
                    "name": "object",
                    "description": "Object containing the property to wait for.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the property to wait for.",
                    "type": "String"
                },
                {
                    "name": "condition",
                    "description": "If Function, this method will call the function with the property\n   value and will wait for the function to return true. Otherwise, this will wait for the\n   property to match this.",
                    "type": "Any"
                }
            ],
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 119,
            "description": "A comparison function that handles every type.",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "a",
                    "description": "First object to compare.",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "Second object to compare.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "-1 if the first object is smaller than the second, 0 if they are\n   equal, -1 if the second object is smaller than the first, or undefined if the two cannot\n   be compared.",
                "type": "Number|undefined"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 143,
            "description": "Converts the given \"array like\" object to array.",
            "itemtype": "method",
            "name": "toArray",
            "params": [
                {
                    "name": "obj",
                    "description": "An array like object to convert.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array object converted from the given array like object.",
                "type": "Array"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 187,
            "description": "Replaces the specified function to call the given function before or after the original\nfunction. The given function will be called with the same arguments and scope as the original\nfunction.",
            "itemtype": "method",
            "name": "extendFn",
            "params": [
                {
                    "name": "scope",
                    "description": "The object containing the function to replace.",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the function to replace.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to be called.",
                    "type": "Function"
                },
                {
                    "name": "callBefore",
                    "description": "True iff the function should be called before the original\n    function. Defaults to false.",
                    "type": "Boolean"
                }
            ],
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 222,
            "description": "Makes the given function curried.",
            "itemtype": "method",
            "name": "curry",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to be curried.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The curried function.",
                "type": "Function"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "tutorial/01_overview.js",
            "line": 52,
            "description": "Some examples of abilities include:\n  <ul>\n    <li>{{#crossLink \"ability.Shuffleable\"}}Shuffleable{{/crossLink}}: Shuffles the component's\n    children when triggered.\n    <li> {{#crossLink \"ability.Pickable\"}}Pickable{{/crossLink}}: Makes the component's move\n    following the mouse, until dropped.\n    <li>{{#crossLink \"ability.Droppable\"}}Droppable{{/crossLink}}: Adds the picked component as\n    the current component's child.\n  </ul>\n\n  Each Ability attached to a Component has its own name. This means that you can have two\n  abilities of the same type, but different names. For example, {{#crossLink \"component.Card\"}}\n  pb-c-card{{/crossLink}} has two abilities: `flippable` and `tappable`, both of which are of\n  type {{#crossLink \"ability.Toggleable\"}}Toggleable{{/crossLink}}.",
            "class": "1 Overview",
            "module": "tutorial"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nReturns the value corresponding to the given key.",
            "line": " src/di.html:162"
        },
        {
            "message": "Missing item type\nSome examples of abilities include:\n  <ul>\n    <li>{{#crossLink \"ability.Shuffleable\"}}Shuffleable{{/crossLink}}: Shuffles the component's\n    children when triggered.\n    <li> {{#crossLink \"ability.Pickable\"}}Pickable{{/crossLink}}: Makes the component's move\n    following the mouse, until dropped.\n    <li>{{#crossLink \"ability.Droppable\"}}Droppable{{/crossLink}}: Adds the picked component as\n    the current component's child.\n  </ul>\n\n  Each Ability attached to a Component has its own name. This means that you can have two\n  abilities of the same type, but different names. For example, {{#crossLink \"component.Card\"}}\n  pb-c-card{{/crossLink}} has two abilities: `flippable` and `tappable`, both of which are of\n  type {{#crossLink \"ability.Toggleable\"}}Toggleable{{/crossLink}}.",
            "line": " tutorial/01_overview.js:52"
        }
    ]
}