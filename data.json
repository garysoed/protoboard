{
    "project": {
        "name": "Protoboard",
        "description": "Check out the tutorials and the API on the side bar. You can play around with the components at the <a href=\"http://garysoed.github.io/protoboard-demo\">demo site</a>.",
        "version": "3.0.0",
        "url": "https://github.com/garysoed/protoboard",
        "colorBackground": "white",
        "colorForeground": "black",
        "colorBorder": "#B6B6B6",
        "colorLightPrimary": "#CFD8DC",
        "colorPrimary": "#607D8B",
        "colorDarkPrimary": "#263238",
        "colorAccent": "#FFD600"
    },
    "files": {
        "src/ability/abilities.html": {
            "name": "src/ability/abilities.html",
            "modules": {},
            "classes": {
                "ability.Abilities.Builder": 1,
                "ability.Abilities": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/ability.html": {
            "name": "src/ability/ability.html",
            "modules": {},
            "classes": {
                "ability.Ability": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/droppable.html": {
            "name": "src/ability/droppable.html",
            "modules": {},
            "classes": {
                "ability.Droppable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/flexdroppable.html": {
            "name": "src/ability/flexdroppable.html",
            "modules": {},
            "classes": {
                "ability.FlexDroppable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/helpable.html": {
            "name": "src/ability/helpable.html",
            "modules": {},
            "classes": {
                "ability.Helpable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/ordereddroppable.html": {
            "name": "src/ability/ordereddroppable.html",
            "modules": {},
            "classes": {
                "ability.OrderedDroppable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/pickable.html": {
            "name": "src/ability/pickable.html",
            "modules": {},
            "classes": {
                "ability.Pickable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/selectedpickable.html": {
            "name": "src/ability/selectedpickable.html",
            "modules": {},
            "classes": {
                "ability.SelectedPickable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/shuffleable.html": {
            "name": "src/ability/shuffleable.html",
            "modules": {},
            "classes": {
                "ability.Shuffleable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/staggereddroppable.html": {
            "name": "src/ability/staggereddroppable.html",
            "modules": {},
            "classes": {
                "ability.StaggeredDroppable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ability/toggleable.html": {
            "name": "src/ability/toggleable.html",
            "modules": {},
            "classes": {
                "ability.Toggleable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component/card.html": {
            "name": "src/component/card.html",
            "modules": {},
            "classes": {
                "component.Card": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component/component.html": {
            "name": "src/component/component.html",
            "modules": {},
            "classes": {
                "component.Component": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component/dice.html": {
            "name": "src/component/dice.html",
            "modules": {},
            "classes": {
                "component.Dice.Rollable": 1,
                "component.Dice.DiceFlippable": 1,
                "component.Dice": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component/token.html": {
            "name": "src/component/token.html",
            "modules": {},
            "classes": {
                "component.Token": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/grid/grid.html": {
            "name": "src/grid/grid.html",
            "modules": {},
            "classes": {
                "grid.Grid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/grid/hexgrid.html": {
            "name": "src/grid/hexgrid.html",
            "modules": {},
            "classes": {
                "grid.HexGrid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/grid/rectgrid.html": {
            "name": "src/grid/rectgrid.html",
            "modules": {},
            "classes": {
                "grid.RectGrid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/grid/trianglegrid.html": {
            "name": "src/grid/trianglegrid.html",
            "modules": {},
            "classes": {
                "grid.TriangleGrid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/bag.html": {
            "name": "src/region/bag.html",
            "modules": {},
            "classes": {
                "region.Bag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/cubetower.html": {
            "name": "src/region/cubetower.html",
            "modules": {},
            "classes": {
                "region.CubeTower": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/deck.html": {
            "name": "src/region/deck.html",
            "modules": {},
            "classes": {
                "region.Deck": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/hand.html": {
            "name": "src/region/hand.html",
            "modules": {},
            "classes": {
                "region.Hand": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/rect.html": {
            "name": "src/region/rect.html",
            "modules": {},
            "classes": {
                "region.Rect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/region/region.html": {
            "name": "src/region/region.html",
            "modules": {},
            "classes": {
                "region.Region": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/acl.html": {
            "name": "src/service/acl.html",
            "modules": {},
            "classes": {
                "service.Acl.Group": 1,
                "service.Acl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/config.html": {
            "name": "src/service/config.html",
            "modules": {},
            "classes": {
                "service.Config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/log.html": {
            "name": "src/service/log.html",
            "modules": {},
            "classes": {
                "service.Log.Entry": 1,
                "service.Log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/move.html": {
            "name": "src/service/move.html",
            "modules": {},
            "classes": {
                "service.Move": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/preview.html": {
            "name": "src/service/preview.html",
            "modules": {},
            "classes": {
                "service.Preview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/registry.html": {
            "name": "src/service/registry.html",
            "modules": {},
            "classes": {
                "service.Registry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/state.html": {
            "name": "src/service/state.html",
            "modules": {},
            "classes": {
                "service.State": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/service/template.html": {
            "name": "src/service/template.html",
            "modules": {},
            "classes": {
                "service.Template": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/third_party/hammer.html": {
            "name": "src/third_party/hammer.html",
            "modules": {},
            "classes": {
                "Hammer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/click.html": {
            "name": "src/trigger/click.html",
            "modules": {},
            "classes": {
                "trigger.Click": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/doubleclick.html": {
            "name": "src/trigger/doubleclick.html",
            "modules": {},
            "classes": {
                "trigger.DoubleClick": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/key.html": {
            "name": "src/trigger/key.html",
            "modules": {},
            "classes": {
                "trigger.Key.Service": 1,
                "trigger.Key": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/trigger.html": {
            "name": "src/trigger/trigger.html",
            "modules": {},
            "classes": {
                "trigger.Trigger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/trigger/triggers.html": {
            "name": "src/trigger/triggers.html",
            "modules": {},
            "classes": {
                "trigger.Triggers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/generate.html": {
            "name": "src/ui/generate.html",
            "modules": {},
            "classes": {
                "ui.Generate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/preview.html": {
            "name": "src/ui/preview.html",
            "modules": {},
            "classes": {
                "ui.Preview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/previewer.html": {
            "name": "src/ui/previewer.html",
            "modules": {},
            "classes": {
                "ui.Previewer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/shape.html": {
            "name": "src/ui/shape.html",
            "modules": {},
            "classes": {
                "ui.Shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/bootstrap.html": {
            "name": "src/bootstrap.html",
            "modules": {},
            "classes": {
                "Bootstrap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/check.html": {
            "name": "src/check.html",
            "modules": {},
            "classes": {
                "Check": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/external.html": {
            "name": "src/external.html",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/module.html": {
            "name": "src/module.html",
            "modules": {
                "api": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/pbelement.html": {
            "name": "src/pbelement.html",
            "modules": {},
            "classes": {
                "PbElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/protoboard.html": {
            "name": "src/protoboard.html",
            "modules": {},
            "classes": {
                "Protoboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils.html": {
            "name": "src/utils.html",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/01_overview.js": {
            "name": "tutorial/01_overview.js",
            "modules": {
                "tutorial": 1
            },
            "classes": {
                "1 Overview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/02_prerequisites.js": {
            "name": "tutorial/02_prerequisites.js",
            "modules": {},
            "classes": {
                "2 Prerequisites": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/03_basic.js": {
            "name": "tutorial/03_basic.js",
            "modules": {},
            "classes": {
                "3 Basic Usage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/04_customize.js": {
            "name": "tutorial/04_customize.js",
            "modules": {},
            "classes": {
                "4 Customizing Components": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/05_theme.js": {
            "name": "tutorial/05_theme.js",
            "modules": {},
            "classes": {
                "5 Theming": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/06_javascript.js": {
            "name": "tutorial/06_javascript.js",
            "modules": {},
            "classes": {
                "6 JavaScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/07_custom_elements.js": {
            "name": "tutorial/07_custom_elements.js",
            "modules": {},
            "classes": {
                "7 Custom Elements": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/08_abilities.js": {
            "name": "tutorial/08_abilities.js",
            "modules": {},
            "classes": {
                "8 Abilities": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/09_triggers.js": {
            "name": "tutorial/09_triggers.js",
            "modules": {},
            "classes": {
                "9 Triggers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tutorial/module.js": {
            "name": "tutorial/module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "api": {
            "name": "api",
            "submodules": {},
            "classes": {
                "ability.Abilities.Builder": 1,
                "ability.Abilities": 1,
                "ability.Ability": 1,
                "ability.Droppable": 1,
                "ability.FlexDroppable": 1,
                "ability.Helpable": 1,
                "ability.OrderedDroppable": 1,
                "ability.Pickable": 1,
                "ability.SelectedPickable": 1,
                "ability.Shuffleable": 1,
                "ability.StaggeredDroppable": 1,
                "ability.Toggleable": 1,
                "component.Card": 1,
                "component.Component": 1,
                "component.Dice.Rollable": 1,
                "component.Dice.DiceFlippable": 1,
                "component.Dice": 1,
                "component.Token": 1,
                "grid.Grid": 1,
                "grid.HexGrid": 1,
                "grid.RectGrid": 1,
                "grid.TriangleGrid": 1,
                "region.Bag": 1,
                "region.CubeTower": 1,
                "region.Deck": 1,
                "region.Hand": 1,
                "region.Rect": 1,
                "region.Region": 1,
                "service.Acl.Group": 1,
                "service.Acl": 1,
                "service.Config": 1,
                "service.Log.Entry": 1,
                "service.Log": 1,
                "service.Move": 1,
                "service.Preview": 1,
                "service.Registry": 1,
                "service.State": 1,
                "service.Template": 1,
                "Hammer": 1,
                "trigger.Click": 1,
                "trigger.DoubleClick": 1,
                "trigger.Key.Service": 1,
                "trigger.Key": 1,
                "trigger.Trigger": 1,
                "trigger.Triggers": 1,
                "ui.Generate": 1,
                "ui.Preview": 1,
                "ui.Previewer": 1,
                "ui.Shape": 1,
                "Bootstrap": 1,
                "Check": 1,
                "PbElement": 1,
                "Protoboard": 1,
                "Utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/utils.html",
            "line": 9
        },
        "tutorial": {
            "name": "tutorial",
            "submodules": {},
            "classes": {
                "1 Overview": 1,
                "2 Prerequisites": 1,
                "3 Basic Usage": 1,
                "4 Customizing Components": 1,
                "5 Theming": 1,
                "6 JavaScript": 1,
                "7 Custom Elements": 1,
                "8 Abilities": 1,
                "9 Triggers": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tutorial/09_triggers.js",
            "line": 1,
            "description": "Protoboard is a library to make prototyping boardgames easier. This is meant to be used for\nprototyping ideas and is therefore focused on ease and flexibility of creating different game\ncomponents. Aesthetics, performance, and correctness are outside the scope of this project,\nthough we do provide some basic support for theming.\n\nThis aims to be customizable in different levels:\n1. JavaScript: Provides JavaScript API to make boardgame components easier (coming soon)\n2. HTML: Developers can use preexisting HTML elements to write their own game.\n3. {{#crossLink \"5 Theming\"}}Theme{{/crossLink}}: This library comes with some existing themes. You\ncan customize the color themes, and if you use CSS, you can customize in greater details.\n\nSome glossary of terminologies for the API:\n{{#html 'dl'}}\n  {{#html 'dt'}}{{#crossLink \"ability.Ability\"}}Ability{{/crossLink}}{{/html}}\n  {{#html 'dd'}}These are where the main logic happens. A Component can have several abilities,\n  each triggered with a Trigger.{{/html}}\n\n  {{#html 'dt'}}{{#crossLink \"component.Component\"}}Component{{/crossLink}}{{/html}}\n  {{#html 'dd'}}Components are the basic entity of a board. They provide main interaction with\n  the players. Every component has one or more abilities registered to it. Check the\n  {{#crossLink \"component.Component\"}}API reference{{/crossLink}} to see the ability names\n  registered to a component.{{/html}}\n\n  {{#html 'dt'}}{{#crossLink \"region.Region\"}}Region{{/crossLink}}{{/html}}\n  {{#html 'dd'}}Regions can contain other components. They cannot be moved and can contain one or\n  more components. Examples include: deck, bag, and hand.{{/html}}\n\n  {{#html 'dt'}}{{#crossLink \"trigger.Trigger\"}}Trigger{{/crossLink}}{{/html}}\n  {{#html 'dd'}}Triggers listen to events in the document and triggers the ability it is\n  associated with. The most common trigger that this library relies on by default is the\n  {{#crossLink \"trigger.Key\"}}Key{{/crossLink}} trigger. To trigger a component, point at the\n  component and press the appropriate key.{{/html}}\n\n  {{#html 'dt'}}UI{{/html}}\n  {{#html 'dd'}}This library also comes with several basic UI elements for convenience. These\n  elements do not have a real life counterpart.{{/html}}\n{{/html}}\n\nEvery element introduced in Protoboard has 3 parts of its name:\n1. `pb-` is the prefix of every Protoboard element.\n2. The second prefix indicates the type of element:\n   - `pb-c-` indicates a component\n   - `pb-r-` indicates a region\n   - `pb-u-` indicates a UI element.\n3. The last part is the name of the element."
        }
    },
    "classes": {
        "ability.Abilities.Builder": {
            "name": "ability.Abilities.Builder",
            "shortname": "ability.Abilities.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/abilities.html",
            "line": 21,
            "description": "Builder helper for using {{#crossLink \"ability.Abilities\"}}Abilities{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "proto",
                    "description": "Prototype of element to add abilities to.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "ability.Abilities": {
            "name": "ability.Abilities",
            "shortname": "ability.Abilities",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/abilities.html",
            "line": 98,
            "description": "Helper class to register abilities to custom elements. You can use this class to customize\nabilities, add abilities, and trigger registered abilities. Any interactions should start with\nthe {{#crossLink \"ability.Abilities/of:method\"}}{{/crossLink}} method.\n\n```javascript\n// Registering ability.\nAbilities.of(el)\n    .add(new Ability());\n```",
            "static": 1
        },
        "ability.Ability": {
            "name": "ability.Ability",
            "shortname": "ability.Ability",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/ability.html",
            "line": 43,
            "description": "Base class for all abilities. Any abilities must extend this class and implement the methods\nin this class.\n\nSince `v1.1.0`, all abilities extending this class will trigger an event with the same name as\nthis ability's name when triggered. This event's detail will have one field, called ability,\nwhich is a reference to this ability.\n\nSince `v1.2.0`, all abilities will log its triggering before and after it is triggered. In the\nentry passed into the preprocessor or the printer, you can examine the value of the `phase`\nentry. If it is `bubble`, the log is called before the trigger is ran. Otherwise, if it is\n`after`, the log is called after the trigger is ran.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability. This is used to identify an ability that has been\n   added to an element. It therefore must be unique for the element.",
                    "type": "String"
                },
                {
                    "name": "defaultTrigger",
                    "description": "The default trigger to trigger this ability, or\n   null if there are no default triggers.",
                    "type": "trigger.Trigger",
                    "optional": true
                }
            ]
        },
        "ability.Droppable": {
            "name": "ability.Droppable",
            "shortname": "ability.Droppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/droppable.html",
            "line": 24,
            "description": "This ability works with conjunction of {{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\nElements with this ability adds the picked element as its child element when triggered.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "droppable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.FlexDroppable": {
            "name": "ability.FlexDroppable",
            "shortname": "ability.FlexDroppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/flexdroppable.html",
            "line": 33,
            "description": "This ability works with conjunction of {{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\nElements with this ability adds the picked element as its child element when triggered. The\ndropped element is positioned to be directly below the mouse cursor when the drop happened,\nby setting the style.left and style.top.",
            "extends": "ability.Droppable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "droppable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "ability.Helpable": {
            "name": "ability.Helpable",
            "shortname": "ability.Helpable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/helpable.html",
            "line": 79,
            "description": "Displays the triggers for all registered abilities.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "helpable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger. Defaults to the '?'\n   key.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "ability.Key"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.OrderedDroppable": {
            "name": "ability.OrderedDroppable",
            "shortname": "ability.OrderedDroppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/ordereddroppable.html",
            "line": 32,
            "description": "This ability works with conjunction of {{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\nElements with this ability adds the picked element as its child element when triggered.\nThe position of the dropped element depends on the mouse position when the trigger\noccured.",
            "extends": "ability.Droppable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "droppable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Key"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "isVertical",
                    "description": "True iff the children are arranged vertically.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "ability.Pickable": {
            "name": "ability.Pickable",
            "shortname": "ability.Pickable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/pickable.html",
            "line": 22,
            "description": "Element with this ability can be picked and dragged around. The element can be dropped on\nelements with {{#crossLink \"ability.Droppable\"}}{{/crossLink}} ability.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pickable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.SelectedPickable": {
            "name": "ability.SelectedPickable",
            "shortname": "ability.SelectedPickable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/selectedpickable.html",
            "line": 34,
            "description": "Element with this ability has content that can be picked and dragged around. When triggered,\nit calls a selection function specified in the constructor and picks up the element returned by\nthat function. This child element can be dropped on elements with\n{{#crossLink \"ability.Droppable\"}}{{/crossLink}} ability.",
            "is_constructor": 1,
            "extends": "ability.Pickable",
            "params": [
                {
                    "name": "selectionFn",
                    "description": "Function that should return the element to be picked. This\n   function has one argument, which is the element that the ability is triggered on.",
                    "type": "Function"
                },
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pickable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "ability.Shuffleable": {
            "name": "ability.Shuffleable",
            "shortname": "ability.Shuffleable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/shuffleable.html",
            "line": 27,
            "description": "Elements with this ability shuffles its children when triggered.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "shuffleable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Ability"
        },
        "ability.StaggeredDroppable": {
            "name": "ability.StaggeredDroppable",
            "shortname": "ability.StaggeredDroppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/staggereddroppable.html",
            "line": 45,
            "description": "Ability that mimics a \"cube tower\". Elements dropped using this ability will have to go\nthrough various \"levels\" of the tower before they are shown. Passing through one level to the\nnext is done randomly.\n\nYou can set the number of tower levels and the probability to pass through the next level\nusing the `<ability name>-chances` attribute. For instance, if the ability's name is `drop`\nand we want a tower with 3 levels, each having a probability of 0.5, 0.2, 0.1 to go to the\nnext level, specify:\n```html\n<pb-r-cubetower drop-chances=\"0.5 0.2 0.1\"></pb-r-cubetower>\n```",
            "extends": "ability.Droppable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"drop\""
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger of the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Key"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability is enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "defaultProbabilities",
                    "description": "Default probabilities passing through each level.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[1]"
                }
            ]
        },
        "ability.Toggleable": {
            "name": "ability.Toggleable",
            "shortname": "ability.Toggleable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ability/toggleable.html",
            "line": 27,
            "description": "Provides decorator to make an element toggleable between two states.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "toggleable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger for the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Key"
                },
                {
                    "name": "defaultConfig",
                    "description": "Default configuration for the ability.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "enabled",
                            "description": "True iff the ability should be enabled by default.",
                            "type": "Boolean"
                        },
                        {
                            "name": "active",
                            "description": "True iff the ability should be toggled to active by\n   default.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "extends": "ability.Ability"
        },
        "component.Card": {
            "name": "component.Card",
            "shortname": "component.Card",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/card.html",
            "line": 100,
            "description": "A representation of a card. To use this, create a `pb-c-card` element with two child elements:\n- One must have a `pb-front` attribute. This is the front face of the card.\n- One must have a `pb-back` attribute. This is the back face of the card.\n\nBy default, the card starts by showing its back. If you want to make it start by showing the\nfront face, add `flippable-active=\"true\"` to the `pb-c-card`.\n\nDefault supported abilities:\n- {{#crossLink \"ability.Pickable\"}}pick{{/crossLink}}\n- {{#crossLink \"ability.Toggleable\"}}flip{{/crossLink}}\n- {{#crossLink \"ability.Toggleable\"}}tap{{/crossLink}}\n\n```html\n<!-- Example: Create a card that starts by displaying its front side -->\n<pb-c-card flippable-active=\"true\">\n  <div pb-front>Front side</div>\n  <div pb-back>Back side</div>\n</pb-c-card>\n```",
            "extends": "component.Component"
        },
        "component.Component": {
            "name": "component.Component",
            "shortname": "component.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/component.html",
            "line": 12,
            "description": "Base class for all components.",
            "extends": "PbElement"
        },
        "component.Dice.Rollable": {
            "name": "component.Dice.Rollable",
            "shortname": "component.Dice.Rollable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/dice.html",
            "line": 95,
            "description": "Elements with this ability can shuffle their children. This is very specific to dice and\nshould not be used for other elements.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "rollable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger of the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Click"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "defaultShowA",
                    "description": "True iff \"Side A\" should be shown by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Shuffleable"
        },
        "component.Dice.DiceFlippable": {
            "name": "component.Dice.DiceFlippable",
            "shortname": "component.Dice.DiceFlippable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/dice.html",
            "line": 149,
            "description": "Dice with this ability can be flipped to the opposite side. This is very specific to dice and\nshould not be used for other elements.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the ability.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "pb-dice-flippable"
                },
                {
                    "name": "defaultTrigger",
                    "description": "Default trigger of the ability.",
                    "type": "trigger.Trigger",
                    "optional": true,
                    "optdefault": "trigger.Key"
                },
                {
                    "name": "defaultEnabled",
                    "description": "True iff the ability should be enabled by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "defaultShowA",
                    "description": "True iff \"Side A\" should be shown by default.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "ability.Ability"
        },
        "component.Dice": {
            "name": "component.Dice",
            "shortname": "component.Dice",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/dice.html",
            "line": 205,
            "description": "A representation of a dice. This element has three levels of customizations.\n\nThe most basic level of customization is to use premade dice. To use this, set the type\nattribute to a supported dice type. For example:\n```html\n<!-- Creates a d2, or a coin -->\n<pb-c-dice type=\"d2\"></pb-c-dice>\n\n<!-- Creates a d20 -->\n<pb-c-dice type=\"d20\"></pb-c-dice>\n```\nCustom types supported are: `d2`, `d4`, `d6`, `d8`, `d10`, `d12`, `d20`.\n\nIn the next level of customization, you can define all the dice faces by creating children for\neach face of the dice. For example, to make the dice used in\n[Mage Wars](https://www.boardgamegeek.com/boardgame/101721/mage-wars), do:\n```html\n<pb-c-dice>\n  <div>&nbsp;</div>\n  <div>1</div>\n  <div>2</div>\n  <div>&nbsp;</div>\n  <div>1!</div>\n  <div>2!</div>\n</pb-c-dice>\n```\n\nFor games that involve flipping dice to the opposite side, like\n[Flash Point: Fire Rescue](http://boardgamegeek.com/boardgame/100901/flash-point-fire-rescue),\nfurther customization is needed. The children in the previous example needs to be paired with a\nparent element with attribute `pb-dice-pair`. For example, to make a normal d6:\n```html\n<pb-c-dice>\n  <div pb-dice-pair>\n    <div>1</div>\n    <div>6</div>\n  </div>\n  <div pb-dice-pair>\n    <div>2</div>\n    <div>5</div>\n  </div>\n  <div pb-dice-pair>\n    <div>3</div>\n    <div>4</div>\n  </div>\n</pb-c-dice>\n```\nIf you do not explicitly specify the pairing, the dice will pair them for you automatically.\nThe first child will be paired with the last child, second child paired with second last, etc.\n\nNote that dice must have an even number of faces.\n\nDefault supported abilities:\n- {{#crossLink \"ability.Pickable\"}}pick{{/crossLink}}\n- {{#crossLink \"component.Dice.Rollable\"}}roll{{/crossLink}}: This is similar to\n  {{#crossLink ability.Shuffleable}}{{/crossLink}}, except it is customized to handle the face\n  pairings.\n- {{#crossLink \"component.Dice.DiceFlippable\"}}flip{{/crossLink}}: Flips the dice to the other\n  side.",
            "extends": "component.Component"
        },
        "component.Token": {
            "name": "component.Token",
            "shortname": "component.Token",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/component/token.html",
            "line": 43,
            "description": "A simple movable component with only one state. Examples of token:\n- Chess piece\n- Cubes\n- Damage marker\n\nTo use this, create a `pb-c-token` element with one child element. This child element will be\ndisplayed as the token.\n\n```html\n<!-- Example: A square token -->\n<pb-c-token>\n  <div style=\"background: red; width: 50px; height: 50px;\"></div>\n<pb-c-token>\n```\n\nSupported abilities:\n- {{#crossLink \"ability.Pickable\"}}pickable{{/crossLink}}",
            "extends": "component.Component"
        },
        "grid.Grid": {
            "name": "grid.Grid",
            "shortname": "grid.Grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/grid/grid.html",
            "line": 24,
            "description": "Base class of all grids.\n\nTo implement a custom grid, you will need to implement 4 getters:\n- {{#crossLink \"grid.Grid/rootEl:property\"}}{{/crossLink}}\n- {{#crossLink \"grid.Grid/mainTemplate:property\"}}{{/crossLink}}\n- {{#crossLink \"grid.Grid/rowTemplate:property\"}}{{/crossLink}}\n- {{#crossLink \"grid.Grid/tileTemplate:property\"}}{{/crossLink}}",
            "extends": "PbElement"
        },
        "grid.HexGrid": {
            "name": "grid.HexGrid",
            "shortname": "grid.HexGrid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/grid/hexgrid.html",
            "line": 71,
            "description": "A grid that lays out its children in a hexagonal grid. To use this, add attributes\n`row` and `col` to the element\n`pb-g-hexgrid`. These are the number of rows and columns in the grid.\n\nAdd the contents of the grid as children of this element. Use `pb-row` and `pb-col` attributes\non them to indicate their positions in the grid.\n\n```html\n<pb-g-hexgrid row=\"2\" col=\"3\">\n  <!-- Third column is empty -->\n  <div pb-row=\"0\" pb-col=\"0\">Top Left</div>\n  <div pb-row=\"0\" pb-col=\"1\">Top Middle</div>\n  <div pb-row=\"1\" pb-col=\"0\">Bottom Left</div>\n  <div pb-row=\"1\" pb-col=\"1\">Bottom Middle</div>\n</pb-g-hexgrid>\n```\n\nYou can use {{#crossLink \"ui.Shape\"}}`<pb-u-shape>`{{/crossLink}} to create hexagon shapes.",
            "extends": "grid.Grid"
        },
        "grid.RectGrid": {
            "name": "grid.RectGrid",
            "shortname": "grid.RectGrid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/grid/rectgrid.html",
            "line": 64,
            "description": "A grid that lays out its children in a rectangular grid. To use this, add attributes\n`row` and `col` to the element `pb-g-rectgrid`. These are the number of rows and columns in the\ngrid.\n\nAdd the contents of the grid as children of this element. Use `pb-row` and `pb-col` attributes\non them to indicate their positions in the grid.\n\n```html\n<pb-g-rectgrid row=\"2\" col=\"3\">\n  <!-- Third column is empty -->\n  <div pb-row=\"0\" pb-col=\"0\">Top Left</div>\n  <div pb-row=\"0\" pb-col=\"1\">Top Right</div>\n  <div pb-row=\"1\" pb-col=\"0\">Bottom Left</div>\n  <div pb-row=\"1\" pb-col=\"1\">Bottom Right</div>\n</pb-g-rectgrid>\n```",
            "extends": "grid.Grid"
        },
        "grid.TriangleGrid": {
            "name": "grid.TriangleGrid",
            "shortname": "grid.TriangleGrid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/grid/trianglegrid.html",
            "line": 73,
            "description": "A grid that lays out its children in a triangular grid. To use this, add attributes\n`row` and `col` to the element `pb-g-trianglegrid`. These are the number of rows and columns in\nthe grid.\n\nAdd the contents of the grid as children of this element. Use `pb-row` and `pb-col` attributes\non them to indicate their positions in the grid.\n\n```html\n<pb-g-trianglegrid row=\"2\" col=\"3\">\n  <!-- Third column is empty -->\n  <div pb-row=\"0\" pb-col=\"0\">Top Left</div>\n  <div pb-row=\"0\" pb-col=\"1\">Top Middle</div>\n  <div pb-row=\"1\" pb-col=\"0\">Bottom Left</div>\n  <div pb-row=\"1\" pb-col=\"1\">Bottom Middle</div>\n</pb-g-trianglegrid>\n```\n\nYou can use {{#crossLink \"ui.Shape\"}}`<pb-u-shape>`{{/crossLink}} to create triangle shapes.",
            "extends": "grid.Grid"
        },
        "region.Bag": {
            "name": "region.Bag",
            "shortname": "region.Bag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/bag.html",
            "line": 94,
            "description": "A collection of components. You cannot see the component until you drag one out of it.\n\nTo make a bag, create a `pb-r-bag` element. You can override the content of the placeholder by\ncreating a child element with a `pb-placeholder-content` attribute. This element will be used for\nthe placeholder content.\n\n```html\n<!-- Example: Create a bag with a place holder token displaying \"SECRET!!\" -->\n<pb-r-bag>\n  <div pb-placeholder-content>SECRET!!</div>\n</pb-r-bag>\n```\n\nSupported abilitie:\n- {{#crossLink \"ability.SelectedPickable\"}}pickable{{/crossLink}}\n- {{#crossLink \"ability.Droppable\"}}droppable{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.CubeTower": {
            "name": "region.CubeTower",
            "shortname": "region.CubeTower",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/cubetower.html",
            "line": 73,
            "description": "Represents a Cube Tower. This uses {{#crossLink \"ability.StaggeredDroppable\"}}{{/crossLink}} to\nsimulate the different levels in a tower.\n\n```html\n<!--\n50% chance for items to drop to level 1, and 20% chance for items to exit the tower from\nlevel 1.\n-->\n<pb-r-cubetower drop-chances=\"0.5 0.2\">\n  <!-- Item in level 0 -->\n  <div pb-tower-level=\"0\"></div>\n  <!-- Item in level 1 -->\n  <div pb-tower-level=\"1\"></div>\n  <!-- Item outside the tower -->\n  <div></div>\n</pb-r-cubetower>\n```\n\nSupported abilities:\n- {{#crossLink \"ability.StaggeredDroppable\"}}drop{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Deck": {
            "name": "region.Deck",
            "shortname": "region.Deck",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/deck.html",
            "line": 67,
            "description": "Represents a collection of items that can be sorted. To use this, create a `pb-r-deck` element.\nAny child elements of this class are considered to be in the deck.\n\n```html\n<!-- Example: Deck containing two cards -->\n<pb-r-deck>\n  <pb-c-card id=\"card1\">\n    <div pb-front>Front</div>\n    <div pb-back>Back</div>\n  </pb-c-card>\n  <pb-c-card id=\"card2\">\n    <div pb-front>Front</div>\n    <div pb-back>Back</div>\n  </pb-c-card>\n</pb-r-deck>\n```\n\nSupported abilities:\n- {{#crossLink \"ability.Droppable\"}}drop{{/crossLink}}\n- {{#crossLink \"ability.Shuffleable\"}}shuffle{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Hand": {
            "name": "region.Hand",
            "shortname": "region.Hand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/hand.html",
            "line": 64,
            "description": "Represents a hand. Like other {{#crossLink region.Region}}{{/crossLink}} elements, the children\nare considered to be in the hand. A hand allows the user to reorder the child elements,\ndepending on where a child element is dropped.\n\n```html\n<!-- Hand with two tokens -->\n<pb-r-deck>\n  <pb-c-token id=\"token1\">\n    <div>Token 1</div>\n  </pb-c-token>\n  <pb-c-token id=\"token2\">\n    <div>Token 2</div>\n  </pb-c-token>\n</pb-r-deck>\n```\n\nSupported abilities:\n- {{#crossLink \"ability.OrderedDroppable\"}}drop{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Rect": {
            "name": "region.Rect",
            "shortname": "region.Rect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/rect.html",
            "line": 55,
            "description": "An arbitrary rectangular region. You can position elements anywhere in this region.\n\nSupported abilities:\n- {{#crossLink \"ability.FlexDroppable\"}}drop{{/crossLink}}",
            "extends": "region.Region"
        },
        "region.Region": {
            "name": "region.Region",
            "shortname": "region.Region",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/region/region.html",
            "line": 38,
            "description": "Base class of all regions.",
            "extends": "PbElement"
        },
        "service.Acl.Group": {
            "name": "service.Acl.Group",
            "shortname": "service.Acl.Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/acl.html",
            "line": 17,
            "description": "Represents a group of players. A group may also contain other groups.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the group.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "service.Acl": {
            "name": "service.Acl",
            "shortname": "service.Acl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/acl.html",
            "line": 86,
            "description": "Service that manages ACLs in the app. This allows you to show element differently depending on\nthe current player. To use this, you first need to register the elements to the service. Then,\nyou need to define the ACL as follows:\n```html\n<div id=\"acl\" pb-acl-readable=\"player1 player2\"></div>\n```\n```javascript\n  Protoboard\n      .setup(function(require) {\n        var AclService = require('pb.service.Acl');\n        AclService.registerElement(document.querySelector('#acl'));\n      })\n      .run(document);\n```\n\nIn the example above, the DIJSV element will be readable if and only if the current player is set\nto `player1` or `player2`. To set the current player, use the\n{{#crossLink \"service.Acl/currentPlayer:property\"}}{{/crossLink}} property. When the DIJSV is\nreadable, this service will add a `pb-acl-readable` class to the element. You can use CSS to\ndisplay the div differently depending on the current player.\n\nYou can specify any kind of action to the ACL, as long as you prepend it with `pb-acl-`.\n\nBeside player names, you can also specify group names. When you do this, you will need to\ndeclare the group's members. For instance:\n```html\n<div id=\"acl\" pb-acl-readable=\"corporation\"></div>\n```\n```javascript\n  Protoboard\n      .setup(function(require) {\n        var AclService = require('pb.service.Acl');\n        AclService\n            .registerElement(document.querySelector('#acl'))\n            .addGroup('corporation', 'weyland', 'jinteki', 'nbn');\n      })\n      .run(document);\n```\nThe element above will be readable if the current player is a member of the corporation group.\nGroups can contain other groups as members.\n\nWhen a registered element is a child of another registered element, the child element's\nability will only be enabled if the parent element allows that ability. For instance:\n```html\n<div id=\"section\" pb-acl-readable=\"corporation\">\n  <div id=\"acl\" pb-acl-readable=\"megacorp\"></div>\n</div>\n```\n\nThe `section` div will be readable by all members of corporation group. However, the `acl` div\nwill only be readable by members of megacorp and corporation group.\n\nYou can control abilities of elements by using the same action as the ability's name. For\nexample:\n```html\n<pb-c-card pb-acl-flip=\"player1\"></pb-c-card>\n```\n\nonly allows player1 to flip the card.",
            "static": 1
        },
        "service.Config": {
            "name": "service.Config",
            "shortname": "service.Config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/config.html",
            "line": 10,
            "description": "Service that manages ability registration for elements. When you create your custom elements,\nuse the Config service to register abilities to the element as follows:\n```javascript\nService.add('custom-element-name', new Droppable());\n```\n\nThis will add the Droppable ability during the registry phase.\n\nEvery {{#crossLink \"ability.Ability\"}}{{/crossLink}} allows you to change its default trigger.\nThe Config service lets you modify the default trigger for all abilities with the same name.\nFor example:\n```javascript\nService.setDefaultTrigger(new Click(), 'flip');\n```\nThe example above sets all `flip` abilities to be triggered by a Click by default.\n\nAlternatively, you can set the default trigger by element type:\n```javascript\nService.setDefaultTrigger(new Click(), 'flip', 'pb-card');\n```\nThe example above sets all `pb-card` `flip` ability to be triggered by a click.",
            "static": 1
        },
        "service.Log.Entry": {
            "name": "service.Log.Entry",
            "shortname": "service.Log.Entry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/log.html",
            "line": 8,
            "description": "An object that contains log entry. You can add properties by using the\n{{#crossLink \"service.Log.Entry/set:method\"}}set{{/crossLink}} method. To retrieve properties,\njust treat this as a JSON. Note that you cannot override existing properties.",
            "since": "1.1.0"
        },
        "service.Log": {
            "name": "service.Log",
            "shortname": "service.Log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/log.html",
            "line": 43,
            "description": "A service to log events and happenings in a game. Use this service to collect statistics about\na game session.\n\nBy default, the service records all triggers to every\n{{#crossLink \"ability.Ability\"}}abilities{{/crossLink}} loaded. The format of a log entry is:\n`<timestamp>: <category> - <value>`. For abilities, `category` is the ability's name, and the\n`value` is the value of `pb-id` of the element the ability acts on.\n\nFor every Protoboard component, region, and grid, you can customize the prefix of the id by\nspecifying the `pb-id` attribute. When the element is activated, Protoboard will append a\nnumber to the attribute to make sure that they are unique. For instance:\n```html\n<pb-c-card pb-id=\"attack\"></pb-c-card>\n```\nwill have its `pb-id` set to `attack-0`. So when the card is `flip`ped, this service will log\n`3/28/2015, 6:01:48 PM: flip - attack-0`.\n\nFor entries not handled by Abilities, you can also add log entries manually. Use the\n{{#crossLink \"service.Log/log:method\"}}{{/crossLink}} method. For instance:\n```javascript\nProtoboard.setup(function(require) {\n  require('pb.service.Log').log('player-count', 2);\n});\n```\nwill generate entry: `3/28/2015, 6:01:48 PM: player-count - 2`.\n\nYou can also customize the string output using the\n{{#crossLink \"service.Log/addPrinter:method\"}}{{/crossLink}} and the\n{{#crossLink \"service.Log/addPreprocessor:method\"}}{{/crossLink}} method. When a log entry is\nadded, it undergoes two phases:\n1. Preprocess: The entry goes through all preprocessors that have been registered to the\n   service. These preprocessors are used to add custom properties to the entry. Note that\n   properties cannot be deleted or modified.\n2. Printing: The entry then goes through all registered printers. The service will use the\n   non null value returned by the first printer.\n\nFor example:\n```javascript\nProtoboard.setup(function(require) {\n  var Log = require('pb.service.Log');\n  Log\n      .addPreprocessor(function(entry) {\n        if (entry.category === 'player-count') {\n          entry.set('count', entry.value);\n        }\n      })\n      .addPrinter(function(entry) {\n        if (entry.category === 'player-count') {\n          return entry.timestamp.toLocaleString()\n              + ': ' + entry.category + ' on ' + entry.count;\n        } else {\n          return null;\n        }\n      })\n     .addPrinter(Log.defaultPrinter)\n     .log('player-count', 2)\n     .log('rng-seed', 1234);\n});\n```\nA preprocessor and printer are functions that takes a log\n{{#crossLink \"service.Log.Entry\"}}Entry{{/crossLink}}. While a preprocessor only adds values\nto the Entry, a printer is expected to return a string, or a null.\n\nYou can specify more than one printer and preprocessors. These functions will be called in the\norder that they are added to the service. As soon as a printer returns a non null value, the\nvalues returned by the other printers in the chain will be ignored.\n\nSo the example above will generate:\n```\n3/28/2015, 6:21:47 PM: player-count on 2\n3/28/2015, 6:21:53 PM: rng-seed - 1234\n```\nThe custom preprocessor added the new `count` property to the entry, which was used by the\ncustom printer to generate the entry for `player-count`. The default printer was used to\ngenerate the one for `rng-seed`.\n\nYou can retrieve the entries using {{#crossLink \"service.Log/blob:property\"}}{{/crossLink}} as\na blob, or {{#crossLink \"service.Log/entries:property\"}}{{/crossLink}} as a string.",
            "static": 1,
            "since": "1.1.0"
        },
        "service.Move": {
            "name": "service.Move",
            "shortname": "service.Move",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/move.html",
            "line": 68,
            "description": "Service that handles moving elements around. Used by\n{{#crossLink \"ability.Droppable\"}}{{/crossLink}} and\n{{#crossLink \"ability.Pickable\"}}{{/crossLink}}.\n\n```javascript\nMove.add(element);  // Sets the element as moved.\n\n// The element will be moved to a special container. To remove the element, just append it\n// somewhere else.\n```",
            "static": 1
        },
        "service.Preview": {
            "name": "service.Preview",
            "shortname": "service.Preview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/preview.html",
            "line": 9,
            "description": "Service that lets the user preview an element on mouse hover.",
            "static": 1
        },
        "service.Registry": {
            "name": "service.Registry",
            "shortname": "service.Registry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/registry.html",
            "line": 20,
            "description": "A service that collects functions to be ran at bootstrap.",
            "is_constructor": 1
        },
        "service.State": {
            "name": "service.State",
            "shortname": "service.State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/state.html",
            "line": 28,
            "description": "Service that manages runtime state of the game. This service uses `pb-state` element to store\nthe state.\n\nYou can set the runtime state by modifying the `pb-state` element attributes, or by using this\nservice. Every attribute name of the `pb-state` element corresponds to the key, while its value\nis the associated value.",
            "static": 1
        },
        "service.Template": {
            "name": "service.Template",
            "shortname": "service.Template",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/service/template.html",
            "line": 18,
            "description": "Service to manage templates in a ProtoBoard app. Use this service to register Handlebar\npartials and data to the template. For example:\n```javascript\nProtoboard.setup(function(require) {\n  var Template = require('pb.service.Template');\n\n  // Registers a partial. The partial value must be contained in the element passed into the\n  // service.\n  Template.addPartial('card', document.querySelector('template'));\n\n  // Registers data to the template.\n  Template.addData('cards', [\n    { value: 'A', suit: 'Spade' },\n    { value: 'A', suit: 'Club' },\n    { value: 'A', suit: 'Heart' },\n    { value: 'A', suit: 'Diamond' },\n  ]);\n});\n```\n\nThis class also registers a `{{#pb-for <from> <to> <step>}}` block helper. This is a simple for\nloop that copies the inner block several times. You can access the index of the loop using the\n`@index` variable.",
            "static": 1
        },
        "Hammer": {
            "name": "Hammer",
            "shortname": "Hammer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/third_party/hammer.html",
            "line": 9,
            "description": "Wrapper around [HammerJS](http://hammerjs.github.io/).",
            "static": 1
        },
        "trigger.Click": {
            "name": "trigger.Click",
            "shortname": "trigger.Click",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/click.html",
            "line": 16,
            "description": "Triggers an ability when the element is clicked.",
            "extends": "trigger.Trigger"
        },
        "trigger.DoubleClick": {
            "name": "trigger.DoubleClick",
            "shortname": "trigger.DoubleClick",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/doubleclick.html",
            "line": 15,
            "description": "Triggers an ability when the element is double clicked.",
            "extends": "trigger.Trigger"
        },
        "trigger.Key.Service": {
            "name": "trigger.Key.Service",
            "shortname": "trigger.Key.Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/key.html",
            "line": 29,
            "description": "Helper service for detecting key press.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "trigger.Key": {
            "name": "trigger.Key",
            "shortname": "trigger.Key",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/key.html",
            "line": 172,
            "description": "Triggers an ability when the given key is pressed while the mouse is over the registered\nelement.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "key",
                    "description": "The key that needs to be pressed to trigger the registered ability.",
                    "type": "String"
                }
            ],
            "extends": "trigger.Trigger"
        },
        "trigger.Trigger": {
            "name": "trigger.Trigger",
            "shortname": "trigger.Trigger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/trigger.html",
            "line": 8,
            "description": "Base class of all triggers. Triggers should be stateless and immutable."
        },
        "trigger.Triggers": {
            "name": "trigger.Triggers",
            "shortname": "trigger.Triggers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/trigger/triggers.html",
            "line": 17,
            "description": "Utility class to manage triggers. Use this class to register your custom trigger by calling\nthe {{#crossLink \"trigger.Trigger/register:method\"}}{{/crossLink}} method.",
            "since": "1.0.0",
            "static": 1
        },
        "ui.Generate": {
            "name": "ui.Generate",
            "shortname": "ui.Generate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ui/generate.html",
            "line": 26,
            "description": "When this element is created, it will process a [Handlebars](http://handlebarsjs.com/) template\nwithin it and replace itself with the processed template.\n\nThe template must be enclosed within a {{#crossLink \"&lt;template&gt;\"}}{{/crossLink}} tag. For\nexample:\n```html\n<pb-u-generate>\n  <template>\n    Template's content.\n    \\{{#if hasCustom}}\n      You can call \\{{> customPartials}} too.\n    \\{{/if}}\n  </template>\n</pb-u-generate>\n```\n\nAll data in the template's scope must be declared in the `input` attribute. Specify a space\nseparated names of the variable names. These variables will be available in the template using\nthe same name. For example:\n```html\n<pb-u-generate input=\"cards game\">\n  <template>\n    Cards of game \"\\{{game.name}}\":\n    <ul>\n    \\{{#each cards}}\n      <li>{{name}}</li>\n    \\{{/each}}\n    </ul>\n  </template>\n</pb-u-generate>\n```\n\nAll data passed into the templates, or custom partials used must be registered using the\n{{#crossLink \"service.Template\"}}{{/crossLink}}. So in the example above, we can register the\ndata as follows:\n```javascript\nProtoboard\n    .setup(function(require) {\n      var Template = require('pb.service.Template');\n\n      Template\n          .addData('cards', [\n            { name: 'Apprentice' },\n            { name: 'Jack of All Trades' },\n            { name: 'Baker' },\n            { name: 'Bishop' }\n          ])\n          .addData('game', {\n            name: 'Awesome deck building game'\n          });\n    })\n    .run(document);\n```\n\nWith the above example, this will produce the following:\n```html\nCards of game \"Awesome deck building game\":\n<ul>\n  <li>Apprentice</li>\n  <li>Jack of All Trades</li>\n  <li>Baker</li>\n  <li>Bishop</li>\n</ul>\n```",
            "extends": "PbElement"
        },
        "ui.Preview": {
            "name": "ui.Preview",
            "shortname": "ui.Preview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ui/preview.html",
            "line": 22,
            "description": "Class that contains a preview if the mouse enters the parent element. This will display\nthe children element as preview.\n\n```html\n<!-- Hover over the div to show \"DETAILS\" -->\n<div id=\"hover_over_me\">\n  <pb-u-preview>\n    <div>DETAILS</div>\n  </pb-u-preview>\n</div>\n```",
            "extends": "PbElement"
        },
        "ui.Previewer": {
            "name": "ui.Previewer",
            "shortname": "ui.Previewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ui/previewer.html",
            "line": 32,
            "description": "Element that displays the innerHTML of the `pb-u-preview` of element currently being hovered\nover. This works in tandem with {{#crossLink ui.Preview}}{{/crossLink}} and\n{{#crossLink service.Preview}}{{/crossLink}}.",
            "extends": "PbElement"
        },
        "ui.Shape": {
            "name": "ui.Shape",
            "shortname": "ui.Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/ui/shape.html",
            "line": 73,
            "description": "Creates a shape. To create a shape, use the `pb-u-shape` element and specify the attribute\n`shape`. Some supported shapes:\n- circle\n- hexagon\n- square\n\n```html\n<!-- Creates a circle -->\n<pb-u-shape shape=\"circle\"></pb-u-shape>\n```\n\nThe created shape is an embedded SVG. So you can customize it using CSS. Use\n`pb-u-shape::shadow .pb-shape` to select the shape.",
            "extends": "HTMLElement"
        },
        "Bootstrap": {
            "name": "Bootstrap",
            "shortname": "Bootstrap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/bootstrap.html",
            "line": 60,
            "description": "Class responsible for bootstrapping the entire app. Call the\n{{#crossLink \"Bootstrap/run:method\"}}run{{/crossLink}} after doing all setting up logic.",
            "static": 1
        },
        "Check": {
            "name": "Check",
            "shortname": "Check",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "file": "src/check.html",
            "line": 20,
            "description": "Utility class to check string values and parse them to different types.\n\n```javascript\n// Check that the string is a number, or throw an error if it isn't.\nCheck('123')\n    .isInt()\n    .orThrows('not a number'); // returns 123 as a number\n\n// Check that the string is a number, or a boolean, or use a default value.\nCheck('abc')\n    .isInt()\n    .isBoolean()\n    .orUse(false); // returns false\n```",
            "is_constructor": 1,
            "params": [
                {
                    "name": "input",
                    "description": "The value to be checked.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value parsed from the input value. Specifying this indicates that the\n   parsing has succeeded.",
                    "type": "Any"
                },
                {
                    "name": "checked",
                    "description": "Array of strings that describe the check that has failed on the input\n   string.",
                    "type": "Array"
                }
            ]
        },
        "PbElement": {
            "name": "PbElement",
            "shortname": "PbElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "namespace": "",
            "file": "src/pbelement.html",
            "line": 21,
            "description": "Base class of all ProtoBoard elements.",
            "extends": "HTMLElement"
        },
        "Protoboard": {
            "name": "Protoboard",
            "shortname": "Protoboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "namespace": "",
            "file": "src/protoboard.html",
            "line": 13,
            "description": "The entry point to Protoboard. Use this class to setup the game and run it.",
            "static": 1
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "api",
            "namespace": "",
            "file": "src/utils.html",
            "line": 9,
            "description": "Various miscellaneous utilities. They are not meant for general usage, but feel free to use\nthem.",
            "static": 1
        },
        "1 Overview": {
            "name": "1 Overview",
            "shortname": "1 Overview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/01_overview.js",
            "line": 1,
            "description": "Protoboard is a library to make prototyping boardgames easier. This is meant to be used for\nprototyping ideas and is therefore focused on ease and flexibility of creating different game\ncomponents. Aesthetics, performance, and correctness are outside the scope of this project,\nthough we do provide some basic support for theming.\n\nThis aims to be customizable in different levels:\n1. JavaScript: Provides JavaScript API to make boardgame components easier (coming soon)\n2. HTML: Developers can use preexisting HTML elements to write their own game.\n3. {{#crossLink \"5 Theming\"}}Theme{{/crossLink}}: This library comes with some existing themes. You\ncan customize the color themes, and if you use CSS, you can customize in greater details.\n\nSome glossary of terminologies for the API:\n{{#html 'dl'}}\n  {{#html 'dt'}}{{#crossLink \"ability.Ability\"}}Ability{{/crossLink}}{{/html}}\n  {{#html 'dd'}}These are where the main logic happens. A Component can have several abilities,\n  each triggered with a Trigger.{{/html}}\n\n  {{#html 'dt'}}{{#crossLink \"component.Component\"}}Component{{/crossLink}}{{/html}}\n  {{#html 'dd'}}Components are the basic entity of a board. They provide main interaction with\n  the players. Every component has one or more abilities registered to it. Check the\n  {{#crossLink \"component.Component\"}}API reference{{/crossLink}} to see the ability names\n  registered to a component.{{/html}}\n\n  {{#html 'dt'}}{{#crossLink \"region.Region\"}}Region{{/crossLink}}{{/html}}\n  {{#html 'dd'}}Regions can contain other components. They cannot be moved and can contain one or\n  more components. Examples include: deck, bag, and hand.{{/html}}\n\n  {{#html 'dt'}}{{#crossLink \"trigger.Trigger\"}}Trigger{{/crossLink}}{{/html}}\n  {{#html 'dd'}}Triggers listen to events in the document and triggers the ability it is\n  associated with. The most common trigger that this library relies on by default is the\n  {{#crossLink \"trigger.Key\"}}Key{{/crossLink}} trigger. To trigger a component, point at the\n  component and press the appropriate key.{{/html}}\n\n  {{#html 'dt'}}UI{{/html}}\n  {{#html 'dd'}}This library also comes with several basic UI elements for convenience. These\n  elements do not have a real life counterpart.{{/html}}\n{{/html}}\n\nEvery element introduced in Protoboard has 3 parts of its name:\n1. `pb-` is the prefix of every Protoboard element.\n2. The second prefix indicates the type of element:\n   - `pb-c-` indicates a component\n   - `pb-r-` indicates a region\n   - `pb-u-` indicates a UI element.\n3. The last part is the name of the element."
        },
        "2 Prerequisites": {
            "name": "2 Prerequisites",
            "shortname": "2 Prerequisites",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/02_prerequisites.js",
            "line": 1,
            "description": "1. Install [NPM](https://www.npmjs.com/).\n2. Unpack the binary in the directory, or install using [bower](http://bower.io/):\n   ```\n   bower install --save protoboard\n   ```\n3. Protoboard relies on\n   [HTML Import](http://www.html5rocks.com/en/tutorials/webcomponents/imports/). So you will need\n   an HTTP server serving static files. A simple one you can use is\n   [http-server](https://www.npmjs.com/package/http-server):\n   `npm install http-server`.\n4. Run `http-server` from the root directory of the project, and navigate to the file you want to\n   open. A good one to start is `ex/all/index.html`."
        },
        "3 Basic Usage": {
            "name": "3 Basic Usage",
            "shortname": "3 Basic Usage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/03_basic.js",
            "line": 1,
            "description": "To use this library, you will need to write an HTML file. You will need to do the following:\n1. Add the following code to the `<head>` block of the document:\n   ```html\n   <link rel=\"import\" href=\"path/to/protoboard/out/main.html\">\n   ```\n2. Add custom elements in the body. Be sure to import the appropriate files in the `<head>`\n   block. For example, to add a token:\n   ```html\n   <head>\n     <!-- Required -->\n     <link rel=\"import\" href=\"path/to/out/di.html\">\n     <link rel=\"import\" href=\"path/to/out/bootstrap.html\">\n\n     <!-- Import token -->\n     <link rel=\"import\" href=\"path/to/out/component/token.html\">\n\n     <!-- This should always come last -->\n     <link rel=\"import\" href=\"path/to/protoboard/out/main.html\">\n   </head>\n\n   <body>\n     <pb-c-token>\n       <div>Token Content</div>\n     </pb-c-token>\n   </body>\n   ```\n   Make sure that all dependencies are ABOVE the `main.html` import.\n\nTo help with debugging for missing imports, you can open the developer tools (Alt + &#8984; for\nChrome on Mac) and check the Console tab. It should tell you elements which are missing imports.\nFor instance `Element pb-r-bag is resolved` indicates that the import for `bag.html` is missing.\n\nMore information on using the element is in the API pages. You can also see\n[all/index.html](https://github.com/garysoed/protoboard/blob/master/ex/all/index.html) for\nexamples on how to use every element. You can also play around with every element on that page.\n\nSome example projects:\n- [Chess](https://github.com/garysoed/protoboard-chess)"
        },
        "4 Customizing Components": {
            "name": "4 Customizing Components",
            "shortname": "4 Customizing Components",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/04_customize.js",
            "line": 1,
            "description": "Every component and region has a set of abilities registered to them. You can view them from\ntheir respective API page. You can customize these abilities to suit your game needs.\n\nEvery ability support the following customization:\n- You can enable / disable the ability by setting the attribute of the component / region. For\n  example:\n  ```html\n  <pb-c-token pickable=\"false\">\n  ```\n  That makes the token non pickable.\n- You can change the trigger for each ability by setting the attribute of the component / region\n  with a `-on` prefix. For example:\n  ```html\n  <pb-c-token pickable-on=\"pb-key-p\">\n  ```\n  That sets the token to be picked when the user hovers over the token and presses `p`. Look at\n  classes extending {{#crossLink \"trigger.Trigger\"}}{{/crossLink}} for more triggers.\n\nMore additional customizations, check out the ability's API page."
        },
        "5 Theming": {
            "name": "5 Theming",
            "shortname": "5 Theming",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/05_theme.js",
            "line": 1,
            "description": "Protoboard supports basic theming using\n[CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables). However,\nsince CSS variables is not widely supported, Protoboard relies on [Myth](http://www.myth.io/) to\ncompile the variables.\n\nYou will need the source code. If you installed protoboard as a bower package, you will find all\nthe files you need under `bower_components/protoboard`. Run `npm install` in the source\ndirectory's root, and you can compile the source code by running:\n```bash\ngulp pack\n```\n\nThe script reads from JSON files in the `./themes` directory. By default, they use the\n`./themes/slateblue.json` theme. To change the colour theme to \"medium sea green\", you can run:\n```bash\ngulp pack --theme ./themes/strawberry.json\n```\n\nThough Protoboard comes with several themes, you can make your own theme. Create a json file with\ntwo keys: `base` and `vars`:\n```json\n{\n  \"base\": \"./bower_components/protoboard/themes/base.json\"\n  \"vars\": {\n      \"--color-primary\": \"#F44336\",\n      \"--color-dark-primary\": \"#B71C1C\",\n      \"--color-light-primary\": \"#FFCDD2\",\n      \"--color-accent\": \"#FFD600\"\n  }\n}\n```\n\nThe `vars` entry defines the colors used throughout the framework. You can see\n`./themes/base.json` for additional variables to override. This include transition time, shadow\nsize, border size, etc.\n\nThe `base` is a reference to another theme file. The path is relative to the location of the\nJSON file and should always start with `.` or `..`. The base theme file will be used for\nvariables that the framework uses but are not defined in your theme file. You can chain the\ndependencies for multiple levels, but it is recommended to always depend on `./themes/base.json`\nin the dependency chain, since new variables might be introduced, and might break your themes if\nyou did not set it in your theme file.\n\nIf you want to use the theme in your own CSS file, require the `loadtheme` in your Node JS. This\nis a function that accepts the file name of the theme JSON file."
        },
        "6 JavaScript": {
            "name": "6 JavaScript",
            "shortname": "6 JavaScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/06_javascript.js",
            "line": 1,
            "description": "Protoboard exposes JavaScript API that you can use to customize your board game prototype. Some\nservices, such as the {{#crossLink \"service.Log\"}}Log Service{{/crossLink}}, requires you to call\nthe JavaScript API.\n\nIn order to access the API, you will to import the file containing the JavaScript you want to\nuse.\n\nAll of the JavaScript API is only accessible from within the Protoboard environment. You can\naccess them from the {{#crossLink \"Protoboard/setup:method\"}}{{/crossLink}} and the\n{{#crossLink \"Protoboard/run:method\"}}{{/crossLink}}:\n\n```javascript\nProtoboard.setup(function(require) {\n  require('pb.service.Log').log('category', 'value');\n});\n```\n\nProtoboard however, only allows one call of `Protoboard.run` to be called. Since `main.html`\nalready does this, you cannot import this file. `main.html` is responsible for bootstraping\nthe app, and without it, you will need to do this yourself. Bootstrapping the app is done calling\nthe {{#crossLink \"Protoboard/run:method\"}}{{/crossLink}}. For example:\n\n```javascript\nProtoboard\n    .setup(function(require) {\n      // Setup logic goes here\n    })\n    .run(document)\n    .then(function(require) {\n      // Logic that runs after the game is running goes here.\n    });\n```\n\nAll logic that requires the Protoboard elements, such as listening to event emitted by the\ncomponents, shuffling a deck, and getting references to DOM elements, should happen after the\nbootstrap. Any other logic should happen before the bootstrap logic."
        },
        "7 Custom Elements": {
            "name": "7 Custom Elements",
            "shortname": "7 Custom Elements",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/07_custom_elements.js",
            "line": 1,
            "description": "All elements in Protoboard are made out of\n[HTML Custom Element](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/) with\nsome {{#crossLink \"ability.Ability\"}}Abilities{{/crossLink}} attached to them. The custom element\nhandles the rendering logic, while the abilities handles user interaction.\n\nAll custom elements should extend the {{#crossLink \"PbElement\"}}{{/crossLink}}. This class\nautomatically assigns a unique ID to the element, which will be used for logging and to uniquely\nidentify an element. If you are making a custom Component, you should extend\n{{#crossLink \"component.Component\"}}{{/crossLink}}. Likewise, if you are making a custom Region,\nyou should extend {{#crossLink \"region.Region\"}}{{/crossLink}}.\n\nAfter creating the custom element, you need to add abilities to it. To do this, use the Config\nservice's {{#crossLink \"service.Config/add:method\"}}add{{/crossLink}} method. For example:\n\n```javascript\nProtoboard\n    .setup(function(require) {\n      var Config = require('pb.service.Config');\n      var Pickable = require('pb.ability.Pickable');\n\n      Config.add('custom-element', new Pickable());\n    });\n```\n\nThis adds the {{#crossLink \"ability.Pickable\"}}{{/crossLink}} ability to the custom element with\nname `custom-element`.\n\nYou will also need to make Protoboard recognizes the new element. To do this, inject a\n`pb.$registry` instance and call its\n{{#crossLink \"service.Registry/add:method\"}}add{{/crossLink}} method:\n\n```javascript\nProtoboard.setup(function(require) {\n  var $registry = require('pb.$registry');\n  $registry.add('custom-element', CustomElement);\n});\n```\n\nNote that you need to do all of the above before calling\n{{#crossLink \"Bootstrap/run:method\"}}{{/crossLink}}."
        },
        "8 Abilities": {
            "name": "8 Abilities",
            "shortname": "8 Abilities",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/08_abilities.js",
            "line": 1,
            "description": "Protoboard has a built in platform for triggering abilities. Every interaction with a Protoboard\ncomponent will trigger an ability.\n\nAll abilities can be found under the `ability` directory. Every ability extends from the\n{{#crossLink \"ability.Ability\"}}{{/crossLink}} class. Extending this class provides the following\nfeatures:\n- Reacts to changes to configuration attribute(s) of this ability.\n- Hook into the {{#crossLink \"service.Log\"}}Logging service{{/crossLink}}\n- Customizable trigger\n\nEvery instance of an ability has a default configuration. When an element created, the ability\nwill check for any configuration attributes it knows, and apply any default configuration to the\nelement. Note that since the same instance of an ability is shared across multiple elements, you\nshould never store element specific state in an ability. Instead, use\n{{#crossLink Symbol}}{{/crossLink}} to decorate the element with the state.\n\nEvery ability is associated with a {{#crossLink \"trigger.Trigger\"}}Trigger{{/crossLink}}. A\ntrigger listens to events in the browser, and, if the event happens, triggers the ability. To\nimplement your own ability, implement the {{#crossLink ability.Ability}}{{/crossLink}} class.\nNote that most of the time, you will only need to implement the\n{{#crossLink \"ability.Ability/doTrigger:method\"}}doTrigger{{/crossLink}} method.\n\nEvery ability on an element can be customized by changing an attribute related to that ability.\nThese attributes are prefixed with `name-`, where `name` is the name of the ability. For example,\nthe `drop-on` attribute specifies the trigger for the `drop` ability. Hence, the following sets\nthe `drop` ability to be triggered when the user clicks on the deck:\n\n```html\n<pb-r-deck drop-on=\"click\"></pb-r-deck>\n```\n\nThe `-on` configuration can be found on every ability, and they all sets the ability's trigger.\nIf you want to add a configuration, you will need to implement the\n{{#crossLink \"ability.Ability/init:method\"}}init{{/crossLink}} method to set the default value of\nthe configuration on the element.\n\nNow that you have your custom ability, you can add it to an element using the\n{{#crossLink \"service.Config\"}}{{/crossLink}}. For example:\n\n```javascript\nProtoboard.setup(function(require) {\n  var Config = require('service.Config');\n  Config.add('pb-c-card', new CustomAbility());\n});\n```\nThe example above adds the CustomAbility to all `pb-c-card` elements."
        },
        "9 Triggers": {
            "name": "9 Triggers",
            "shortname": "9 Triggers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tutorial",
            "namespace": "",
            "file": "tutorial/09_triggers.js",
            "line": 1,
            "description": "Beside abilities, Protoboard also allows you to create your own Triggers. Triggers are the main\nway for Abilities to be executed. Examples of Triggers include the\n{{#crossLink \"trigger.Click\"}}Click{{/crossLink}} trigger, which triggers an ability on an\nelement when the user clicks that element.\n\nTo create a trigger, you need to implement the {{#crossLink \"trigger.Trigger\"}}{{/crossLink}}\nclass. You will then need to register a parser with the\n{{#crossLink \"trigger.Triggers\"}}{{/crossLink}} service, by calling the\n{{#crossLink \"trigger.Triggers/register:method\"}}register{{/crossLink}} method. For example:\n\n```javascript\nProtoboard.setup(function(require) {\n  var Events = require('Events');\n  var Trigger = require('trigger.Trigger');\n  var Triggers = require('trigger.Triggers');\n\n  var OnMouseUpTrigger = function() {};\n  OnMouseUpTrigger.prototype = Object.create(Trigger.prototype);\n\n  OnMouseUpTrigger.prototype.on = function(element, ability) {\n    Events.of(element, this)\n        .on('dom', 'mouseup', ability.trigger.bind(ability, element));\n  };\n\n  OnMouseUpTrigger.prototype.off = function(element) {\n  \t Events.of(element, this).off('dom', 'mouseup');\n  };\n\n  OnMouseUpTrigger.prototype.toString = function() {\n    return 'mouseup';\n  };\n\n  OnMouseUpTrigger.prototype.helpText = 'Triggers when mouse is unpressed on the element';\n\n  Triggers.register(function(string) {\n    return (string === 'mouseup') ? new OnMouseUpTrigger() : undefined;\n  });\n});\n```\n\nThe {{#crossLink \"Events\"}}{{/crossLink}} class is a utility class to make event registering and\nunregistering easier to manage.",
            "since": "1.0.0"
        }
    },
    "classitems": [
        {
            "file": "src/ability/abilities.html",
            "line": 33,
            "description": "Adds the given ability to the element prototype specified in the builder.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "ability",
                    "description": "The ability to add.",
                    "type": "ability.Ability"
                }
            ],
            "return": {
                "description": "This builder object for chaining.",
                "type": "ability.Abilities.Builder"
            },
            "class": "ability.Abilities.Builder"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 59,
            "itemtype": "method",
            "name": "getAll",
            "return": {
                "description": "Map of ability name to ability of the element prototype in context. This\n   excludes the trigger attribute of the abilities.",
                "type": "Map"
            },
            "class": "ability.Abilities.Builder"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 77,
            "description": "Removes all registered abilities from the specified element prototype.",
            "itemtype": "method",
            "name": "reset",
            "class": "ability.Abilities.Builder"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 114,
            "description": "Handler called when the MutationObserver detected a change.",
            "itemtype": "method",
            "name": "__onMutation__",
            "params": [
                {
                    "name": "records",
                    "description": "Array of {{#crossLink \"MutationRecord\"}}{{/crossLink}}s.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ability.Abilities"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 131,
            "description": "Creates a new {{#crossLink \"ability.Abilities.Builder\"}}Builder{{/crossLink}} to operate on\nthe given element.",
            "itemtype": "method",
            "name": "of",
            "params": [
                {
                    "name": "proto",
                    "description": "Prototype of element that the Builder should operate on.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The builder object.",
                "type": "ability.Abilities.Builder"
            },
            "class": "ability.Abilities"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 143,
            "description": "Initializes the added abilities on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to initialize.",
                    "type": "Element"
                }
            ],
            "class": "ability.Abilities"
        },
        {
            "file": "src/ability/abilities.html",
            "line": 178,
            "description": "Triggers the ability corresponding to the given name.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element to trigger the ability on.",
                    "type": "Element"
                },
                {
                    "name": "name",
                    "description": "Name of the ability to trigger. Refer to the element's API for the\n   names.",
                    "type": "String"
                }
            ],
            "class": "ability.Abilities"
        },
        {
            "file": "src/ability/ability.html",
            "line": 56,
            "description": "Initializes the ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default values to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 70,
            "description": "Updates the inner state of the ability based on changes to the element.",
            "itemtype": "method",
            "name": "updateConfig",
            "params": [
                {
                    "name": "el",
                    "description": "Element whose attributes have changed.",
                    "type": "Element"
                }
            ],
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 99,
            "description": "Triggers the effect of the ability on the given element.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to trigger the ability on.",
                    "type": "Element"
                }
            ],
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 120,
            "description": "Actually triggers the effect of the ability on the given element. All abilities must extend\nthis method.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to trigger the ability on.",
                    "type": "Element"
                }
            ],
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 131,
            "description": "Returns the trigger for this ability on this element.",
            "itemtype": "method",
            "name": "getTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to return the trigger for this ability for.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "The trigger for this ability on this element, or null if there\n   is none.",
                "type": "trigger.Trigger|null"
            },
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 143,
            "itemtype": "method",
            "name": "isEnabled",
            "params": [
                {
                    "name": "el",
                    "description": "The element to check if the ability is enabled on it.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True iff the ability is enabled on the given element.",
                "type": "Boolean"
            },
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 152,
            "description": "Name of the ability. This is also the name of the attribute on the element corresponding to\nthis ability.",
            "itemtype": "property",
            "name": "attrName",
            "type": "string",
            "final": 1,
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 164,
            "description": "The name of the attribute on the element corresponding to this ability that sets the trigger\nfor this ability. This is the name of the ability with a `-on` postfix.",
            "itemtype": "property",
            "name": "attrTrigger",
            "type": "string",
            "final": 1,
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/ability.html",
            "line": 176,
            "description": "The default trigger of the ability, or null if none exists.",
            "itemtype": "property",
            "name": "defaultTrigger",
            "type": "trigger.Trigger",
            "class": "ability.Ability"
        },
        {
            "file": "src/ability/droppable.html",
            "line": 41,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Droppable"
        },
        {
            "file": "src/ability/droppable.html",
            "line": 55,
            "description": "Drops the next element added to {{#crossLink \"service.Move\"}}{{/crossLink}} as a child of the\ngiven element.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element to drop the picked element into.",
                    "type": "Element"
                }
            ],
            "class": "ability.Droppable"
        },
        {
            "file": "src/ability/flexdroppable.html",
            "line": 45,
            "description": "Handles event when the MutationObserver observes changes to the child list.",
            "itemtype": "method",
            "name": "__onDomMutation__",
            "params": [
                {
                    "name": "mutations",
                    "description": "Array of MutationRecords.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ability.FlexDroppable"
        },
        {
            "file": "src/ability/flexdroppable.html",
            "line": 61,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.FlexDroppable"
        },
        {
            "file": "src/ability/flexdroppable.html",
            "line": 73,
            "description": "Drop the last dragged element on the given element",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to drop the dragged element into.",
                    "type": "Element"
                }
            ],
            "class": "ability.FlexDroppable"
        },
        {
            "file": "src/ability/helpable.html",
            "line": 93,
            "description": "Displays the triggers for all abilities registered to this element.",
            "itemtype": "method",
            "name": "doTriggexr",
            "params": [
                {
                    "name": "el",
                    "description": "The element whose abilities should be displayed.",
                    "type": "Element"
                }
            ],
            "class": "ability.Helpable"
        },
        {
            "file": "src/ability/helpable.html",
            "line": 122,
            "description": "Helpable is always enabled.",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": "True. Always",
                "type": "Boolean"
            },
            "class": "ability.Helpable"
        },
        {
            "file": "src/ability/ordereddroppable.html",
            "line": 49,
            "description": "Drops the element added to {{#crossLink \"service.Move\"}}{{/crossLink}} as a child of the\ngiven element. The position of the dropped child depends on the position of the mouse at the\ntrigger time relative to the other children.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to drop the picked element into.",
                    "type": "Element"
                }
            ],
            "class": "ability.OrderedDroppable"
        },
        {
            "file": "src/ability/pickable.html",
            "line": 39,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Pickable"
        },
        {
            "file": "src/ability/pickable.html",
            "line": 53,
            "description": "Picks up the element and makes it follow the mouse cursor.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element to be picked up.",
                    "type": "Element"
                }
            ],
            "class": "ability.Pickable"
        },
        {
            "file": "src/ability/selectedpickable.html",
            "line": 52,
            "description": "Picks up a random child element of the given element.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element whose child element should be randomly picked.",
                    "type": "Element"
                }
            ],
            "class": "ability.SelectedPickable"
        },
        {
            "file": "src/ability/shuffleable.html",
            "line": 43,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Shuffleable"
        },
        {
            "file": "src/ability/shuffleable.html",
            "line": 57,
            "description": "Shuffles the given element's children, if this ability is enabled on the element.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element whose children should be shuffled.",
                    "type": "Element"
                }
            ],
            "class": "ability.Shuffleable"
        },
        {
            "file": "src/ability/staggereddroppable.html",
            "line": 62,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.StaggeredDroppable"
        },
        {
            "file": "src/ability/staggereddroppable.html",
            "line": 76,
            "description": "Updates the inner state of the ability based on changes to the element.",
            "itemtype": "method",
            "name": "updateConfig",
            "params": [
                {
                    "name": "el",
                    "description": "Element whose attributes have changed.",
                    "type": "Element"
                }
            ],
            "class": "ability.StaggeredDroppable"
        },
        {
            "file": "src/ability/staggereddroppable.html",
            "line": 108,
            "description": "Drops the currently moved element into the given element. This also moves elements in every\nlevel of the tower.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element to drop the moved element into.",
                    "type": "Element"
                }
            ],
            "class": "ability.StaggeredDroppable"
        },
        {
            "file": "src/ability/staggereddroppable.html",
            "line": 149,
            "itemtype": "method",
            "name": "isInStaggerState",
            "params": [
                {
                    "name": "child",
                    "description": "The element to check.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True iff the given element is in stagger state.",
                "type": "Boolean"
            },
            "class": "ability.StaggeredDroppable"
        },
        {
            "file": "src/ability/staggereddroppable.html",
            "line": 158,
            "description": "Name of the attribute to set the probability of the elements to pass to the next level for\nevery level in the tower.",
            "itemtype": "property",
            "name": "attrChances",
            "type": "string",
            "final": 1,
            "class": "ability.StaggeredDroppable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 55,
            "itemtype": "method",
            "name": "__isEnabled__",
            "params": [
                {
                    "name": "el",
                    "description": "Element to check.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True iff the ability is enabled for the given element.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 65,
            "itemtype": "method",
            "name": "__isActive__",
            "params": [
                {
                    "name": "el",
                    "description": "Element to check.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True iff the element is currently active.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 75,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 92,
            "description": "Toggles the state of the given element, if the ability is enabled on the element.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "Element that should be toggled.",
                    "type": "Element"
                }
            ],
            "class": "ability.Toggleable"
        },
        {
            "file": "src/ability/toggleable.html",
            "line": 102,
            "description": "The name of the attribute on the element corresponding to this ability that indicates that\nthe element is in active state. This is the name of the ability with a `-active` postfix.",
            "itemtype": "property",
            "name": "attrActive",
            "type": "string",
            "final": 1,
            "class": "ability.Toggleable"
        },
        {
            "file": "src/component/card.html",
            "line": 125,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "component.Card"
        },
        {
            "file": "src/component/card.html",
            "line": 138,
            "description": "Node name of the card.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "component.Card"
        },
        {
            "file": "src/component/dice.html",
            "line": 118,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "component.Dice.Rollable"
        },
        {
            "file": "src/component/dice.html",
            "line": 135,
            "description": "Shuffles the children and randomly selects the side to show.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "el",
                    "description": "The element to trigger the ability on.",
                    "type": "Element"
                }
            ],
            "class": "component.Dice.Rollable"
        },
        {
            "file": "src/component/dice.html",
            "line": 172,
            "description": "Sets the default configuration for this ability on the given element.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "el",
                    "description": "The element to set the default configuration to.",
                    "type": "Element"
                }
            ],
            "class": "component.Dice.DiceFlippable"
        },
        {
            "file": "src/component/dice.html",
            "line": 189,
            "description": "Flips the dice to the opposite side.",
            "itemtype": "method",
            "name": "doTrigger",
            "params": [
                {
                    "name": "el",
                    "description": "The dice to flip.",
                    "type": "Element"
                }
            ],
            "class": "component.Dice.DiceFlippable"
        },
        {
            "file": "src/component/dice.html",
            "line": 271,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "component.Dice"
        },
        {
            "file": "src/component/dice.html",
            "line": 311,
            "description": "Node name of the dice.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "component.Dice"
        },
        {
            "file": "src/component/token.html",
            "line": 67,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "component.Token"
        },
        {
            "file": "src/component/token.html",
            "line": 78,
            "description": "Node name of the token.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "component.Token"
        },
        {
            "file": "src/grid/grid.html",
            "line": 38,
            "description": "Method called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "grid.Grid"
        },
        {
            "file": "src/grid/grid.html",
            "line": 74,
            "description": "Returns the element at the given row and column, or null if not found.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "row",
                    "description": "The row index of the element to be returned.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The col index of the element to be returned.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The HTML element at the given row and col, or null if not found.",
                "type": "HTMLElement|null"
            },
            "class": "grid.Grid"
        },
        {
            "file": "src/grid/grid.html",
            "line": 88,
            "description": "The root element of the grid. All rows will be added as children to this element.",
            "itemtype": "property",
            "name": "rootEl",
            "type": "Element",
            "final": 1,
            "class": "grid.Grid"
        },
        {
            "file": "src/grid/grid.html",
            "line": 99,
            "description": "Main template to render. This will be added as the shadow root of the element.",
            "itemtype": "property",
            "name": "mainTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.Grid"
        },
        {
            "file": "src/grid/grid.html",
            "line": 110,
            "description": "Template to render for every row in the grid. Tiles will be added as children to this\nelement.",
            "itemtype": "property",
            "name": "rowTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.Grid"
        },
        {
            "file": "src/grid/grid.html",
            "line": 122,
            "description": "Template to render for every tile in the grid. This must have a content element.",
            "itemtype": "property",
            "name": "tileTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.Grid"
        },
        {
            "file": "src/grid/hexgrid.html",
            "line": 96,
            "description": "The root element of the grid. All rows will be added as children to this element.",
            "itemtype": "property",
            "name": "rootEl",
            "type": "Element",
            "final": 1,
            "class": "grid.HexGrid"
        },
        {
            "file": "src/grid/hexgrid.html",
            "line": 107,
            "description": "Main template to render. This will be added as the shadow root of the element.",
            "itemtype": "property",
            "name": "mainTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.HexGrid"
        },
        {
            "file": "src/grid/hexgrid.html",
            "line": 118,
            "description": "Template to render for every row in the grid. Tiles will be added as children to this\nelement.",
            "itemtype": "property",
            "name": "rowTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.HexGrid"
        },
        {
            "file": "src/grid/hexgrid.html",
            "line": 130,
            "description": "Template to render for every tile in the grid.",
            "itemtype": "property",
            "name": "tileTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.HexGrid"
        },
        {
            "file": "src/grid/hexgrid.html",
            "line": 142,
            "description": "Node name of the hex grid.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "grid.HexGrid"
        },
        {
            "file": "src/grid/rectgrid.html",
            "line": 87,
            "description": "The root element of the grid. All rows will be added as children to this element.",
            "itemtype": "property",
            "name": "rootEl",
            "type": "Element",
            "final": 1,
            "class": "grid.RectGrid"
        },
        {
            "file": "src/grid/rectgrid.html",
            "line": 98,
            "description": "Main template to render. This will be added as the shadow root of the element.",
            "itemtype": "property",
            "name": "mainTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.RectGrid"
        },
        {
            "file": "src/grid/rectgrid.html",
            "line": 109,
            "description": "Template to render for every row in the grid. Tiles will be added as children to this\nelement.",
            "itemtype": "property",
            "name": "rowTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.RectGrid"
        },
        {
            "file": "src/grid/rectgrid.html",
            "line": 121,
            "description": "Template to render for every tile in the grid.",
            "itemtype": "property",
            "name": "tileTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.RectGrid"
        },
        {
            "file": "src/grid/rectgrid.html",
            "line": 133,
            "description": "Node name of the rect grid.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "grid.RectGrid"
        },
        {
            "file": "src/grid/trianglegrid.html",
            "line": 98,
            "description": "The root element of the grid. All rows will be added as children to this element.",
            "itemtype": "property",
            "name": "rootEl",
            "type": "Element",
            "final": 1,
            "class": "grid.TriangleGrid"
        },
        {
            "file": "src/grid/trianglegrid.html",
            "line": 109,
            "description": "Main template to render. This will be added as the shadow root of the element.",
            "itemtype": "property",
            "name": "mainTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.TriangleGrid"
        },
        {
            "file": "src/grid/trianglegrid.html",
            "line": 120,
            "description": "Template to render for every row in the grid. Tiles will be added as children to this\nelement.",
            "itemtype": "property",
            "name": "rowTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.TriangleGrid"
        },
        {
            "file": "src/grid/trianglegrid.html",
            "line": 132,
            "description": "Template to render for every tile in the grid.",
            "itemtype": "property",
            "name": "tileTemplate",
            "type": "Element",
            "final": 1,
            "class": "grid.TriangleGrid"
        },
        {
            "file": "src/grid/trianglegrid.html",
            "line": 144,
            "description": "Node name of the triangle grid.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "grid.TriangleGrid"
        },
        {
            "file": "src/region/bag.html",
            "line": 118,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Bag"
        },
        {
            "file": "src/region/bag.html",
            "line": 141,
            "description": "The number of elements that users can pick out from the bag.",
            "itemtype": "property",
            "name": "pickableChildCount",
            "type": "number",
            "readonly": "",
            "class": "region.Bag"
        },
        {
            "file": "src/region/bag.html",
            "line": 155,
            "description": "Randomly picks a child of the given element that is not placeholder element.",
            "itemtype": "method",
            "name": "__selectChild__",
            "params": [
                {
                    "name": "el",
                    "description": "Element whose child should be picked randomly.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Child of the given element that is not placeholder element that has been\n   picked randomly. Or null if no such child exists.",
                "type": "Element"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "region.Bag"
        },
        {
            "file": "src/region/bag.html",
            "line": 171,
            "description": "Node name of the bag.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "region.Bag"
        },
        {
            "file": "src/region/cubetower.html",
            "line": 100,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.CubeTower"
        },
        {
            "file": "src/region/cubetower.html",
            "line": 110,
            "description": "The number of elements that users can pick out from the cube tower.",
            "itemtype": "property",
            "name": "pickableChildCount",
            "type": "number",
            "readonly": "",
            "class": "region.CubeTower"
        },
        {
            "file": "src/region/cubetower.html",
            "line": 128,
            "description": "Node name of the cube tower.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "region.CubeTower"
        },
        {
            "file": "src/region/deck.html",
            "line": 97,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Deck"
        },
        {
            "file": "src/region/deck.html",
            "line": 107,
            "description": "The number of elements that users can pick out from the deck.",
            "itemtype": "property",
            "name": "pickableChildCount",
            "type": "number",
            "readonly": "",
            "class": "region.Deck"
        },
        {
            "file": "src/region/deck.html",
            "line": 119,
            "description": "Node name of the deck.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "region.Deck"
        },
        {
            "file": "src/region/hand.html",
            "line": 89,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Hand"
        },
        {
            "file": "src/region/hand.html",
            "line": 100,
            "description": "The number of elements that users can pick out from the hand.",
            "itemtype": "property",
            "name": "pickableChildCount",
            "type": "number",
            "readonly": "",
            "class": "region.Hand"
        },
        {
            "file": "src/region/hand.html",
            "line": 112,
            "description": "Node name of the hand.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "region.Hand"
        },
        {
            "file": "src/region/rect.html",
            "line": 66,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Rect"
        },
        {
            "file": "src/region/rect.html",
            "line": 76,
            "description": "The number of elements that users can pick out from the rectangle region.",
            "itemtype": "property",
            "name": "pickableChildCount",
            "type": "number",
            "readonly": "",
            "class": "region.Rect"
        },
        {
            "file": "src/region/rect.html",
            "line": 88,
            "description": "Node name of the rectangular region.",
            "itemtype": "property",
            "name": "NODE_NAME",
            "type": "string",
            "final": 1,
            "static": 1,
            "class": "region.Rect"
        },
        {
            "file": "src/region/region.html",
            "line": 46,
            "description": "Called when there is a mutation on the element.",
            "itemtype": "method",
            "name": "__onMutation__",
            "params": [
                {
                    "name": "record",
                    "description": "Array of MutationRecords.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "region.Region"
        },
        {
            "file": "src/region/region.html",
            "line": 63,
            "description": "Method called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "region.Region"
        },
        {
            "file": "src/region/region.html",
            "line": 77,
            "description": "The number of children this element has that the player can pick.",
            "itemtype": "property",
            "name": "pickableChildCount",
            "type": "number",
            "readonly": "",
            "class": "region.Region"
        },
        {
            "file": "src/service/acl.html",
            "line": 30,
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "candidate",
                    "description": "Name of group or player to check the membership.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True iff the given group or player is a member of the current group.",
                "type": "Boolean"
            },
            "class": "service.Acl.Group"
        },
        {
            "file": "src/service/acl.html",
            "line": 50,
            "description": "Adds the given member or group to the current group.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "member",
                    "description": "The player or group to be added as a member of the\n   current group.",
                    "type": "string|service.Acl.Group"
                }
            ],
            "class": "service.Acl.Group"
        },
        {
            "file": "src/service/acl.html",
            "line": 157,
            "description": "Resets the cache in the given element.",
            "itemtype": "method",
            "name": "__reset__",
            "params": [
                {
                    "name": "el",
                    "description": "The element whose cache should be reset.",
                    "type": "Element"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "service.Acl"
        },
        {
            "file": "src/service/acl.html",
            "line": 170,
            "description": "Updates the cache for the given element.",
            "itemtype": "method",
            "name": "__update__",
            "params": [
                {
                    "name": "el",
                    "description": "The element to run the update on.",
                    "type": "Element"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "service.Acl"
        },
        {
            "file": "src/service/acl.html",
            "line": 204,
            "description": "Handler called when attribute on an element has been changed.",
            "itemtype": "method",
            "name": "__onMutation__",
            "params": [
                {
                    "name": "records",
                    "description": "Array of {{#crossLink \"MutationRecord\"}}{{/crossLink}}s.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "service.Acl"
        },
        {
            "file": "src/service/acl.html",
            "line": 221,
            "description": "Registers the given element to watch for ACL changes.",
            "itemtype": "method",
            "name": "registerElement",
            "params": [
                {
                    "name": "el",
                    "description": "The element to be registered.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "This service for chaining.",
                "type": "service.Acl"
            },
            "class": "service.Acl"
        },
        {
            "file": "src/service/acl.html",
            "line": 238,
            "itemtype": "method",
            "name": "isActionEnabled",
            "params": [
                {
                    "name": "el",
                    "description": "The element to check if the action is enabled.",
                    "type": "Element"
                },
                {
                    "name": "actionName",
                    "description": "The name of action to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise that will resolve to true iff the action is enabled on the given\n   element.",
                "type": "Promise"
            },
            "class": "service.Acl"
        },
        {
            "file": "src/service/acl.html",
            "line": 263,
            "description": "Creates or updates a group to the service.",
            "itemtype": "method",
            "name": "addGroup",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the group to be created",
                    "type": "String"
                },
                {
                    "name": "members",
                    "description": "Members of the group. This can be a group name, or a player's\n   name.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "class": "service.Acl"
        },
        {
            "file": "src/service/acl.html",
            "line": 284,
            "description": "The current player.",
            "itemtype": "property",
            "name": "currentPlayer",
            "type": "{string}",
            "class": "service.Acl"
        },
        {
            "file": "src/service/config.html",
            "line": 38,
            "description": "Adds the given abilities to the given element name.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "elementName",
                    "description": "The name of the element to add the abilities to.",
                    "type": "String"
                },
                {
                    "name": "abilities",
                    "description": "Abilities to be added to the element.",
                    "type": "ability.Ability",
                    "multiple": true
                }
            ],
            "return": {
                "description": "This service for chaining.",
                "type": "service.Config"
            },
            "class": "service.Config"
        },
        {
            "file": "src/service/config.html",
            "line": 58,
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "elementName",
                    "description": "Name of the element whose registered abilities should be\n   returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Set of abilities that have been registered to the given element or null if the\n   element has never been added to the service.",
                "type": "Set"
            },
            "class": "service.Config"
        },
        {
            "file": "src/service/config.html",
            "line": 69,
            "description": "Sets the given trigger as the default trigger for abilities whose name matches the given\nname. Optionally, if the element is specified, only match abilities for that element.",
            "itemtype": "method",
            "name": "setDefaultTrigger",
            "params": [
                {
                    "name": "trigger",
                    "description": "The trigger to set.",
                    "type": "trigger.Trigger"
                },
                {
                    "name": "abilityName",
                    "description": "Name of ability whose default trigger should be set.",
                    "type": "String"
                },
                {
                    "name": "elementName",
                    "description": "Name of element to match. If not specified, this will\n   match all elements.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "service.Config"
        },
        {
            "file": "src/service/config.html",
            "line": 91,
            "description": "Removes all configurations that has been added to the service.",
            "itemtype": "method",
            "name": "reset",
            "class": "service.Config"
        },
        {
            "file": "src/service/log.html",
            "line": 18,
            "description": "Adds a property to the entry.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the property to add.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value associated with the property",
                    "type": "Any"
                }
            ],
            "class": "service.Log.Entry"
        },
        {
            "file": "src/service/log.html",
            "line": 135,
            "description": "Adds an entry to the log.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "category",
                    "description": "The category of the entry. Use this to identify the type of the log.\n   For instance, \"click\", \"flip\".",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the category for the entry.",
                    "type": "Any"
                },
                {
                    "name": "extra",
                    "description": "Extra data to be added to the entry. This defaults to empty object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "This service, for chaining.",
                "type": "service.Log"
            },
            "class": "service.Log"
        },
        {
            "file": "src/service/log.html",
            "line": 181,
            "description": "Adds a preprocessor to preprocess a log entry. A preprocessor is a function that takes an\n{{#crossLink \"service.Log.Entry\"}}Entry{{/crossLink}}.",
            "itemtype": "method",
            "name": "addPreprocessor",
            "params": [
                {
                    "name": "preprocessor",
                    "description": "The preprocessor to be added.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This service, for chaining.",
                "type": "service.Log"
            },
            "class": "service.Log"
        },
        {
            "file": "src/service/log.html",
            "line": 194,
            "description": "Adds a printer to preprocess a log entry. A printer is a function that takes an\n{{#crossLink \"service.Log.Entry\"}}Entry{{/crossLink}} and returns a string, or a null, if the\nprinter is not applicable to the entry.",
            "itemtype": "method",
            "name": "addPrinter",
            "params": [
                {
                    "name": "printer",
                    "description": "The printer to be added.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This service, for chaining.",
                "type": "service.Log"
            },
            "class": "service.Log"
        },
        {
            "file": "src/service/log.html",
            "line": 208,
            "description": "Removes all preprocessors and printers that have been added to this service.",
            "itemtype": "method",
            "name": "clearProcessors",
            "return": {
                "description": "This service, for chaining.",
                "type": "service.Log"
            },
            "deprecated": true,
            "since": "1.1.0",
            "class": "service.Log"
        },
        {
            "file": "src/service/log.html",
            "line": 223,
            "description": "Removes all entries that have been added to this service.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "This service, for chaining.",
                "type": "service.Log"
            },
            "deprecated": true,
            "class": "service.Log"
        },
        {
            "file": "src/service/log.html",
            "line": 236,
            "description": "The entries as a blob.",
            "itemtype": "property",
            "name": "blob",
            "type": "Blob",
            "final": 1,
            "class": "service.Log"
        },
        {
            "file": "src/service/log.html",
            "line": 247,
            "description": "The entries as a string.",
            "itemtype": "property",
            "name": "entries",
            "type": "string",
            "final": 1,
            "class": "service.Log"
        },
        {
            "file": "src/service/log.html",
            "line": 258,
            "description": "Default printer of the service. This printer is also used if no custom printers are  added.",
            "itemtype": "property",
            "name": "defaultPrinter",
            "type": "Function",
            "final": 1,
            "class": "service.Log"
        },
        {
            "file": "src/service/move.html",
            "line": 89,
            "description": "Moves the container element to the last known location of the mouse.",
            "itemtype": "method",
            "name": "__moveContainer__",
            "access": "private",
            "tagname": "",
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 112,
            "description": "Handles event when the mouse is moved.",
            "itemtype": "method",
            "name": "__onMouseMove__",
            "params": [
                {
                    "name": "event",
                    "description": "The corresponding mouse event.",
                    "type": "MouseEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 125,
            "description": "Handles event when there is a mutation on the container element.",
            "itemtype": "method",
            "name": "__onContainerMutation__",
            "params": [
                {
                    "name": "records",
                    "description": "Array of mutation records.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 148,
            "description": "Sets the given element as being moved.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "el",
                    "description": "Element to move.",
                    "type": "Element"
                }
            ],
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 162,
            "description": "The elements that are being moved.",
            "itemtype": "property",
            "name": "movedElements",
            "type": "Set",
            "final": 1,
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 173,
            "description": "The next element to be moved.",
            "itemtype": "property",
            "name": "nextElement",
            "type": "Element",
            "final": 1,
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 184,
            "description": "Last known X coordinate of the mouse in px.",
            "itemtype": "property",
            "name": "mouseX",
            "type": "number",
            "final": 1,
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 195,
            "description": "Last known Y coordinate of the mouse in px.",
            "itemtype": "property",
            "name": "mouseY",
            "type": "number",
            "final": 1,
            "class": "service.Move"
        },
        {
            "file": "src/service/move.html",
            "line": 208,
            "description": "Fired when an element has been moved.",
            "itemtype": "event",
            "name": "move",
            "class": "service.Move"
        },
        {
            "file": "src/service/preview.html",
            "line": 25,
            "description": "Element that is being previewed, if any. If null, no element is being previewed.",
            "itemtype": "property",
            "name": "previewedEl",
            "type": "Element|null",
            "class": "service.Preview"
        },
        {
            "file": "src/service/preview.html",
            "line": 44,
            "description": "Fired when the previewed element has been changed.",
            "itemtype": "event",
            "name": "element-changed",
            "class": "service.Preview"
        },
        {
            "file": "src/service/registry.html",
            "line": 31,
            "description": "Sets the given element name and prototype to be registered as custom element at bootstrap.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "Element name to register",
                    "type": "Name"
                },
                {
                    "name": "ctor",
                    "description": "Constructor function of the custom element.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This object for chaining.",
                "type": "!service.Registry"
            },
            "class": "service.Registry"
        },
        {
            "file": "src/service/registry.html",
            "line": 64,
            "description": "Runs the given function at bootstrap.",
            "itemtype": "method",
            "name": "runAtRegister",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to run. This function takes in a\n   {{#crossLink \"Document\"}}{{/crossLink}} and a\n   {{#crossLink \"service.Config\"}}{{/crossLink}}.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This object for chaining.",
                "type": "!service.Registry"
            },
            "class": "service.Registry"
        },
        {
            "file": "src/service/registry.html",
            "line": 78,
            "description": "Runs all the collected functions.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "doc",
                    "description": "Document object to run the functions in.",
                    "type": "Document"
                },
                {
                    "name": "Config",
                    "description": "The configuration service to use.",
                    "type": "service.Config"
                }
            ],
            "return": {
                "description": "This object for chaining.",
                "type": "!service.Registry"
            },
            "class": "service.Registry"
        },
        {
            "file": "src/service/state.html",
            "line": 45,
            "itemtype": "method",
            "name": "__getElement__",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the `pb-state` element should contain.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The `pb-state` element with the given key.",
                "type": "!Element"
            },
            "access": "private",
            "tagname": "",
            "class": "service.State"
        },
        {
            "file": "src/service/state.html",
            "line": 65,
            "description": "Sets the value of the given key.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "key",
                    "description": "The key corresponding to the value to be inserted.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set.",
                    "type": "String"
                }
            ],
            "class": "service.State"
        },
        {
            "file": "src/service/state.html",
            "line": 76,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve the value of.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value corresponding to the key.",
                "type": "String"
            },
            "class": "service.State"
        },
        {
            "file": "src/service/template.html",
            "line": 52,
            "description": "Registers the given partial.",
            "itemtype": "method",
            "name": "addPartial",
            "params": [
                {
                    "name": "name",
                    "description": "Name to use for the partial.",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element whose innerHTML contains the partial definition. Note that\n   while this class does not enforce it, this element's type should be\n   {{#crossLink \"&lt;template&gt;\"}}{{/crossLink}}. This is to deal with handling \">\" to\n   allow you to use HTML tags in the partial and calling other partials.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "This service for chaining.",
                "type": "service.Template"
            },
            "class": "service.Template"
        },
        {
            "file": "src/service/template.html",
            "line": 68,
            "description": "Adds data to be inserted into the templates.",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "name",
                    "description": "Name to add the data by.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to be added.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "This service for chaining.",
                "type": "service.Template"
            },
            "class": "service.Template"
        },
        {
            "file": "src/service/template.html",
            "line": 85,
            "description": "Retrieves the data with the given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "Key of the data to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise that will be resolved with an array consisting of the key and the\n   data requested.",
                "type": "Promise"
            },
            "class": "service.Template"
        },
        {
            "file": "src/third_party/hammer.html",
            "line": 22,
            "description": "Creates a new Hammer object, or return a cached one if one already exists.",
            "itemtype": "method",
            "name": "__getHammer__",
            "params": [
                {
                    "name": "el",
                    "description": "The element associated with the Hammer JS object.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "The Hammer JS object.",
                "type": "Hammer"
            },
            "access": "private",
            "tagname": "",
            "class": "Hammer"
        },
        {
            "file": "src/third_party/hammer.html",
            "line": 49,
            "description": "Registers the given gesture to the given element and handler.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "el",
                    "description": "The element to register.",
                    "type": "Element"
                },
                {
                    "name": "gestureType",
                    "description": "The type of Hammer JS gesture to register.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function to register.",
                    "type": "Function"
                }
            ],
            "class": "Hammer"
        },
        {
            "file": "src/third_party/hammer.html",
            "line": 61,
            "description": "Unregisters the given gesture from the given element and handler.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "el",
                    "description": "Element to unregister from.",
                    "type": "Element"
                },
                {
                    "name": "gestureType",
                    "description": "Type of Hammer JS gesture to register.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function to unregister.",
                    "type": "Function"
                }
            ],
            "class": "Hammer"
        },
        {
            "file": "src/trigger/click.html",
            "line": 24,
            "description": "Registers the given element to trigger the given ability when clicked.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element to register.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/click.html",
            "line": 36,
            "description": "Unregisters the given element from triggering the registered ability when clicked.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/click.html",
            "line": 46,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String click",
                "type": "String"
            },
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/click.html",
            "line": 54,
            "description": "The help text to be displayed by {{#crossLink \"ability.Helpable\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "helpText",
            "type": "string",
            "final": 1,
            "class": "trigger.Click"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 23,
            "description": "Registers the given element to trigger the given ability when double clicked.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element to register.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 35,
            "description": "Unregisters the given element from triggering the registered ability when double clicked.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 45,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String dblclick",
                "type": "String"
            },
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/doubleclick.html",
            "line": 53,
            "description": "The help text to be displayed by {{#crossLink \"ability.Helpable\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "helpText",
            "type": "string",
            "final": 1,
            "class": "trigger.DoubleClick"
        },
        {
            "file": "src/trigger/key.html",
            "line": 42,
            "description": "Handles event when a key press is detected.",
            "itemtype": "method",
            "name": "__onKeyPress__",
            "params": [
                {
                    "name": "event",
                    "description": "The KeyboardEvent that triggered this handler.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 83,
            "description": "Initializes the service.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to listen to key presses.",
                    "type": "Document"
                }
            ],
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 95,
            "description": "Registers the given element to trigger the given ability when the given key is pressed.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "element",
                    "description": "The element to trigger when the given key is pressed.",
                    "type": "Element"
                },
                {
                    "name": "key",
                    "description": "The key to press",
                    "type": "String"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 116,
            "description": "Unregisters the given element.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "element",
                    "description": "The element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 126,
            "description": "Clears all registered elements.",
            "itemtype": "method",
            "name": "clear",
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 135,
            "description": "Map of elements to trigger the ability on. The key is the element, the value is a map of key\nto a set of abilities.",
            "itemtype": "property",
            "name": "hoveredEls",
            "type": "Map",
            "final": 1,
            "class": "trigger.Key.Service"
        },
        {
            "file": "src/trigger/key.html",
            "line": 185,
            "description": "Handles event called when mouse has entered the element.",
            "itemtype": "method",
            "name": "__onMouseEnter__",
            "params": [
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                },
                {
                    "name": "element",
                    "description": "The element that the mouse has entered.",
                    "type": "Element"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 197,
            "description": "Handles event called when mouse has left the element.",
            "itemtype": "method",
            "name": "__onMouseLeave__",
            "params": [
                {
                    "name": "element",
                    "description": "The element that the mouse has left.",
                    "type": "Element"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 208,
            "description": "Registers the given element to trigger the given ability when a key is pressed while the\nmouse is hovering over the element.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element that needs to be hovered over to trigger the ability.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 223,
            "description": "Unregisters the given element from any listeners registered in the on method.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister the listener from.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 234,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String `key-<key>`, where `key` is the key that needs to be pressed to\n   trigger this.",
                "type": "String"
            },
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/key.html",
            "line": 243,
            "description": "The help text to be displayed by {{#crossLink \"ability.Helpable\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "helpText",
            "type": "string",
            "final": 1,
            "class": "trigger.Key"
        },
        {
            "file": "src/trigger/trigger.html",
            "line": 14,
            "description": "Registers the given element to trigger the given ability when clicked.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "element",
                    "description": "Element to register.",
                    "type": "Element"
                },
                {
                    "name": "ability",
                    "description": "The ability to trigger.",
                    "type": "ability.Ability"
                }
            ],
            "class": "trigger.Trigger"
        },
        {
            "file": "src/trigger/trigger.html",
            "line": 25,
            "description": "Unregisters the given element from triggering the registered ability when clicked.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "element",
                    "description": "Element to unregister.",
                    "type": "Element"
                }
            ],
            "class": "trigger.Trigger"
        },
        {
            "file": "src/trigger/trigger.html",
            "line": 35,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String representation of the trigger. This can be used to set the trigger of\n   an ability. If this is passed to the parser for the trigger, it must return the same\n   trigger.",
                "type": "String"
            },
            "class": "trigger.Trigger"
        },
        {
            "file": "src/trigger/triggers.html",
            "line": 31,
            "description": "Parses the given string using the registered parse functions and returns the first matching\ntrigger. If no parse can match the string, this will throw an error.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "triggerString",
                    "description": "The string to be parsed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The parsed trigger.",
                "type": "trigger.Trigger"
            },
            "class": "trigger.Triggers"
        },
        {
            "file": "src/trigger/triggers.html",
            "line": 54,
            "description": "Registers a parsing function.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "parseFn",
                    "description": "The parsing function. This should take a string and return the\n   parsed trigger if the input string is valid, or `undefined` otherwise.",
                    "type": "Function"
                }
            ],
            "class": "trigger.Triggers"
        },
        {
            "file": "src/trigger/triggers.html",
            "line": 65,
            "description": "Clears any registered functions.",
            "itemtype": "method",
            "name": "clear",
            "deprecated": true,
            "class": "trigger.Triggers"
        },
        {
            "file": "src/ui/generate.html",
            "line": 96,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "ui.Generate"
        },
        {
            "file": "src/ui/preview.html",
            "line": 49,
            "description": "Callback called when the mouse has left the parent element.",
            "itemtype": "method",
            "name": "__onMouseOut__",
            "access": "private",
            "tagname": "",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 59,
            "description": "Callback called when the mouse has entered the parent element.",
            "itemtype": "method",
            "name": "__onMouseOver__",
            "access": "private",
            "tagname": "",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 69,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 80,
            "description": "Called when the element is attached to the document.",
            "itemtype": "method",
            "name": "attachedCallback",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/preview.html",
            "line": 94,
            "description": "Called when the element is detached from the document.",
            "itemtype": "method",
            "name": "detachedCallback",
            "class": "ui.Preview"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 50,
            "description": "Called when the preview element has changed.",
            "itemtype": "method",
            "name": "__onPreviewElChanged__",
            "access": "private",
            "tagname": "",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 64,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 77,
            "description": "Called when the element is attached to the document.",
            "itemtype": "method",
            "name": "attachedCallback",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/previewer.html",
            "line": 90,
            "description": "Called when the element is detached from the document.",
            "itemtype": "method",
            "name": "detachedCallback",
            "class": "ui.Previewer"
        },
        {
            "file": "src/ui/shape.html",
            "line": 93,
            "description": "Called when the element is created.",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "ui.Shape"
        },
        {
            "file": "src/bootstrap.html",
            "line": 69,
            "description": "Runs the bootstrapping logic. All setup logic should occur before calling this.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "document",
                    "description": "The DOM document to run the app in.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "Promise that will be resolved once all the bootstrapping logic has finished\n   executing.",
                "type": "Promise"
            },
            "class": "Bootstrap"
        },
        {
            "file": "src/check.html",
            "line": 50,
            "description": "Handles when a check has failed.",
            "itemtype": "method",
            "name": "__onFailure__",
            "params": [
                {
                    "name": "checked",
                    "description": "The description of check that has been done.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new Check object with the appended checked description.",
                "type": "Check"
            },
            "access": "private",
            "tagname": "",
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 65,
            "description": "Handles when a parse has succeeded.",
            "itemtype": "method",
            "name": "__onSuccess__",
            "params": [
                {
                    "name": "value",
                    "description": "The value successfully parsed from the string input.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "A new check object with the first successfully parsed value.",
                "type": "Check"
            },
            "access": "private",
            "tagname": "",
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 81,
            "description": "Try to parse the input string as an int with the given radix.",
            "itemtype": "method",
            "name": "isInt",
            "params": [
                {
                    "name": "radix",
                    "description": "Radix to use to parse the input string. Defaults to 10.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new instance of the Check object used for chaining.",
                "type": "Check"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 97,
            "description": "Try to parse the input string as a float.",
            "itemtype": "method",
            "name": "isFloat",
            "return": {
                "description": "A new instance of the Check object used for chaining.",
                "type": "Check"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 112,
            "description": "Try to parse the input string as a boolean.",
            "itemtype": "method",
            "name": "isBoolean",
            "return": {
                "description": "A new instance of the Check object used for chaining.",
                "type": "Check"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 130,
            "description": "Try to parse the input string as a list of string.",
            "itemtype": "method",
            "name": "isList",
            "params": [
                {
                    "name": "separator",
                    "description": "The separator used for the list. Defaults to space.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new instance of the Check object used for chaining.",
                "type": "Check"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 148,
            "description": "Throws an exception if no parse has been successful.",
            "itemtype": "method",
            "name": "orThrows",
            "params": [
                {
                    "name": "msg",
                    "description": "The error message to throw. If not defined, will use an auto generated\n   one.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first successful parsed value.",
                "type": "Any"
            },
            "class": "Check"
        },
        {
            "file": "src/check.html",
            "line": 168,
            "description": "Use the given value if no parse attempts have been successful.",
            "itemtype": "method",
            "name": "orUse",
            "params": [
                {
                    "name": "backup",
                    "description": "Value to use as backup if no parsing has been successful.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The first successful parsed value, or the given backup value if no parse\n   attempts were successful.",
                "type": "Any"
            },
            "class": "Check"
        },
        {
            "file": "src/external.html",
            "line": 6,
            "description": "Wraps built in external vars so they are overridable in tests.",
            "class": "PbElement"
        },
        {
            "file": "src/pbelement.html",
            "line": 29,
            "description": "Called when the element is created",
            "itemtype": "method",
            "name": "createdCallback",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 54,
            "description": "Called when the element is attached to the document.",
            "itemtype": "method",
            "name": "attachedCallback",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 66,
            "description": "Called when the element is detached from the document.",
            "itemtype": "method",
            "name": "detachedCallback",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 73,
            "description": "Promise that will be resolved when the element has been created.",
            "type": "Promise",
            "itemtype": "property",
            "name": "whenCreated",
            "final": 1,
            "deprecated": true,
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 86,
            "description": "pb-id of the element.",
            "type": "string",
            "itemtype": "property",
            "name": "pbId",
            "final": 1,
            "since": "1.3.0",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 98,
            "description": "Prefix of the element's pb-id value.",
            "type": "string",
            "itemtype": "property",
            "name": "pbIdPrefix",
            "final": 1,
            "since": "1.3.0",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/pbelement.html",
            "line": 112,
            "description": "Fired when the element has been created.",
            "itemtype": "event",
            "name": "created",
            "class": "PbElement",
            "module": "api"
        },
        {
            "file": "src/protoboard.html",
            "line": 21,
            "description": "Registers a function to be ran before the game is ran.",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "setupFn",
                    "description": "Function to be run before the game starts. This function has one\n    argument, which is a function that can be used to retrieve Protoboard classes.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This object for chainin.",
                "type": "Protoboard"
            },
            "class": "Protoboard",
            "module": "api"
        },
        {
            "file": "src/protoboard.html",
            "line": 34,
            "description": "Runs the game on the given document object.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "doc ",
                    "description": "Document to run the game on. Defaults to the root document\n    if not specified.",
                    "type": "Document",
                    "optional": true,
                    "optdefault": " document"
                }
            ],
            "return": {
                "description": "Promise that will be resolved with a function when the game has started. Use\n    this function to retrieve Protoboard classes.",
                "type": "Promise"
            },
            "class": "Protoboard",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 17,
            "description": "Extracts the given template from the given document.",
            "itemtype": "method",
            "name": "extractTemplate",
            "params": [
                {
                    "name": "templateQuery",
                    "description": "The query used to obtain the template.",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "description": "The document object to obtain the template from.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "The node in the template.",
                "type": "Node"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 29,
            "description": "Activates the given template element.",
            "itemtype": "method",
            "name": "activateTemplate",
            "params": [
                {
                    "name": "template",
                    "description": "The template element.",
                    "type": "Element"
                },
                {
                    "name": "doc",
                    "description": "The document object to activate the template in.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "The activated template element.",
                "type": "Element"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 41,
            "description": "Returns the referenced function, or noop function if the referenced function does not exist.",
            "itemtype": "method",
            "name": "nonNullFn",
            "params": [
                {
                    "name": "scope",
                    "description": "Object containing the referenced function.",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Name of the function to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The referenced function, or noop function if the referenced function does\n   not exist.",
                "type": "Function"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 54,
            "description": "Observes the given property on the given object.",
            "itemtype": "method",
            "name": "observe",
            "params": [
                {
                    "name": "object",
                    "description": "Object to observe changes to.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The property name to listen to, or null to listen to all\n   properties.",
                    "type": "String|null"
                },
                {
                    "name": "handler",
                    "description": "Handler called when a property has changed. The handler accepts 3\n   arguments: property name, change type, and the old value of the property.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The handler used to unobserve the object.",
                "type": "Function"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 77,
            "description": "Returns a Promise that waits for the given property of the given object to fulfill the given\ncondition.",
            "itemtype": "method",
            "name": "waitFor",
            "params": [
                {
                    "name": "object",
                    "description": "Object containing the property to wait for.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the property to wait for.",
                    "type": "String"
                },
                {
                    "name": "condition",
                    "description": "If Function, this method will call the function with the property\n   value and will wait for the function to return true. Otherwise, this will wait for the\n   property to match this.",
                    "type": "Any"
                }
            ],
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 120,
            "description": "A comparison function that handles every type.",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "a",
                    "description": "First object to compare.",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "Second object to compare.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "-1 if the first object is smaller than the second, 0 if they are\n   equal, -1 if the second object is smaller than the first, or undefined if the two cannot\n   be compared.",
                "type": "Number|undefined"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 144,
            "description": "Converts the given \"array like\" object to array.",
            "itemtype": "method",
            "name": "toArray",
            "params": [
                {
                    "name": "obj",
                    "description": "An array like object to convert.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array object converted from the given array like object.",
                "type": "Array"
            },
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 194,
            "description": "Replaces the specified function to call the given function before or after the original\nfunction. The given function will be called with the same arguments and scope as the original\nfunction.",
            "itemtype": "method",
            "name": "extendFn",
            "params": [
                {
                    "name": "scope",
                    "description": "The object containing the function to replace.",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the function to replace.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to be called.",
                    "type": "Function"
                },
                {
                    "name": "callBefore",
                    "description": "True iff the function should be called before the original\n    function. Defaults to false.",
                    "type": "Boolean"
                }
            ],
            "class": "Utils",
            "module": "api"
        },
        {
            "file": "src/utils.html",
            "line": 229,
            "description": "Makes the given function curried.",
            "itemtype": "method",
            "name": "curry",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to be curried.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The curried function.",
                "type": "Function"
            },
            "class": "Utils",
            "module": "api"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nWraps built in external vars so they are overridable in tests.",
            "line": " src/external.html:6"
        }
    ]
}